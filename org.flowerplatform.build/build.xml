<project default="build" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<property file="build.properties" />

	<property file="DO_NOT_COMMIT/build.properties.local" />
	<property name="keystore.file" location="DO_NOT_COMMIT/${keystore.fileName}" />

	<target name="update-license-header" description="Update license header">
		<ant dir="ant" antfile="update-license-header.xml" />
	</target>

	<path id="maven-ant-tasks.classpath" path="${m2Repo}/org/apache/maven/maven-ant-tasks/2.1.3/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />

	<target name="set-version" description="Set the new version in the pom.xml files">
		<echo>Set version for parent</echo>
		<artifact:mvn mavenHome="${mavenHome}" fork="true">
			<arg value="-Nversions:set" />
			<arg value="-DnewVersion=${version.appVersion}${version.qualifierSuffix}" />
			<arg value="-DgenerateBackupPoms=${version.generateBackupPoms}" />
		</artifact:mvn>
		
		<echo>Set the version for the flex build</echo>
		<echo>Add _flex suffix because some flex projects are also packaged as Eclipse plugins and the Tycho build does not allow duplicate pom versions in the same reactor</echo>
		<artifact:mvn pom="flex" mavenHome="${mavenHome}" fork="true">
			<arg value="-Nversions:set" />
			<arg value="-DnewVersion=${version.appVersion}${version.qualifierSuffix}_flex" />
			<arg value="-DgenerateBackupPoms=${version.generateBackupPoms}" />
			<arg value="-DflexVersion=${flexVersion}" />
		</artifact:mvn>
		
		<echo>Set the version in .inc files for the flex app</echo>
		<replaceregexp file="../org.flowerplatform.flex_client.core/src/org/flowerplatform/flex_client/core/plugin/version.inc" match="_appVersion = .*" replace="_appVersion = &quot;${version.appVersion}${version.qualifierSuffix}&quot;" />
		<replaceregexp file="../org.flowerplatform.flex_client.core/src/org/flowerplatform/flex_client/core/plugin/version.inc" match="_apiVersion = .*" replace="_apiVersion = &quot;${version.apiVersion}&quot;" />
	
		<echo>Set the version in mobile app</echo>
		<replaceregexp file="../org.flowerplatform.flex_client.host_app.mobile/src/MainMobile-app.xml" match="&lt;versionNumber&gt;.*&lt;/versionNumber&gt;" replace="&lt;versionNumber&gt;${version.appVersion}&lt;/versionNumber&gt;" />
		
		<echo>Set the version for the java build</echo>
		<echo>Set the version in MANIFEST.MF with qualifier suffix pom files will also be changed, but will have -snapshot suffix, so we overwrite that later</echo>
		<artifact:mvn pom="java" mavenHome="${mavenHome}" fork="true">
			<arg value="org.eclipse.tycho:tycho-versions-plugin:set-version" />
			<arg value="-N" />
			<arg value="-DnewVersion=${version.appVersion}.qualifier" />
		</artifact:mvn>
	
		<echo>Add .qualifier suffix to match the bundle version in MANIFEST.MF</echo>
		<artifact:mvn pom="java" mavenHome="${mavenHome}" fork="true">
			<arg value="versions:set" />
			<arg value="-N" />
			<arg value="-DnewVersion=${version.appVersion}${version.qualifierSuffix}.qualifier" />
			<arg value="-DgenerateBackupPoms=${version.generateBackupPoms}" />
		</artifact:mvn>
	
		<echo>Set the version for remaining projects</echo>
		
		<artifact:mvn pom="../org.flowerplatform.host.servletbridge.base" mavenHome="${mavenHome}" fork="true">
			<arg value="versions:set" />
			<arg value="-N" />
			<arg value="-DnewVersion=${version.appVersion}${version.qualifierSuffix}" />
			<arg value="-DgenerateBackupPoms=${version.generateBackupPoms}" />
		</artifact:mvn>
	
		<artifact:mvn pom="../org.flowerplatform.host.web_app" mavenHome="${mavenHome}" fork="true">
			<arg value="versions:set" />
			<arg value="-N" />
			<arg value="-DnewVersion=${version.appVersion}${version.qualifierSuffix}" />
			<arg value="-DgenerateBackupPoms=${version.generateBackupPoms}" />
		</artifact:mvn>
	
		<echo>Set the version in CoreConstants.java</echo>
		<replaceregexp file="../org.flowerplatform.core/src/org/flowerplatform/core/CoreConstants.java" match="APP_VERSION = .*;" replace="APP_VERSION = &quot;${version.appVersion}${version.qualifierSuffix}&quot;;" />
		<replaceregexp file="../org.flowerplatform.core/src/org/flowerplatform/core/CoreConstants.java" match="API_VERSION = .*;" replace="API_VERSION = &quot;${version.apiVersion}&quot;;" />
	
		<echo>Set the version for the war build</echo>
		<artifact:mvn pom="../org.flowerplatform.host.web_app/war-pck" mavenHome="${mavenHome}" fork="true">
			<arg value="versions:set" />
			<arg value="-N" />
			<arg value="-DnewVersion=${version.appVersion}${version.qualifierSuffix}_war" />
			<arg value="-DgenerateBackupPoms=${version.generateBackupPoms}" />
			<arg value="-DappVersion=${version.appVersion}" />
		</artifact:mvn>
	</target>

	<!-- Must be run once for each machine where the build is performed, and whenever the lib version changes -->
	<target name="install-flex-deps" description="Install Flex dependencies">
		<artifact:mvn mavenHome="${mavenHome}" fork="true">
			<arg value="install:install-file" />
			<arg value="-N" />
			<arg value="-DgroupId=com.google.code.flexlib" />
			<arg value="-DartifactId=flexlib" />
			<arg value="-Dversion=2.5" />
			<arg value="-Dpackaging=swc" />
			<arg value="-Dfile=../org.flowerplatform.flexutil_legacy/lib/flexlib.swc" />
		</artifact:mvn>

		<artifact:mvn mavenHome="${mavenHome}" fork="true">
			<arg value="install:install-file" />
			<arg value="-N" />
			<arg value="-DgroupId=flextras" />
			<arg value="-DartifactId=mobilecomponents" />
			<arg value="-Dversion=1.0" />
			<arg value="-Dpackaging=swc" />
			<arg value="-Dfile=../org.flowerplatform.flexutil/lib/MobileComponents45.swc" />
		</artifact:mvn>
		
		<artifact:mvn mavenHome="${mavenHome}" fork="true">
			<arg value="install:install-file" />
			<arg value="-N" />
			<arg value="-DgroupId=com.google.code.stagewebviewbridge" />
			<arg value="-DartifactId=stagewebviewbridge" />
			<arg value="-Dversion=1.0" />
			<arg value="-Dpackaging=swc" />
			<arg value="-Dfile=../org.flowerplatform.flexutil/lib/StageWebViewBridge.swc" />
		</artifact:mvn>
	</target>

	<target name="clean-and-copy-maven-deps" description="Clean and copy Maven dependencies to lib-from-maven">
		<echo>Clean and copy maven dependencies for ${project_loc}</echo>
		
		<!-- Clean dependencies -->
		<delete dir="${project_loc}/lib-from-maven" />
		
		<!-- Copy dependencies -->
		<artifact:mvn mavenHome="${mavenHome}" fork="true">
			<arg value="dependency:copy-dependencies" />
			<arg value="-f${project_loc}/lib-from-maven-pom.xml" />
			<arg value="-DoutputDirectory=lib-from-maven" />
		</artifact:mvn>
	</target>
	
	<target name="build" description="Perform and validate build">
		<delete file="build.log" />
		<record name="build.log" action="start" loglevel="verbose" />

		<!-- the qualifier suffix needs to be wrapped in quotes ONLY if it is not the empty string -->
		<condition property="version.qualifierSuffixForFormat" value="" else="'${version.qualifierSuffix}'">
			<equals arg1="${version.qualifierSuffix}" arg2="" />
		</condition>

		<artifact:mvn pom="pom.xml" mavenHome="${mavenHome}" fork="true">
			<jvmarg value="-Xmx1024m" />
			<jvmarg value="-XX:MaxPermSize=256m" />
			
			<arg value="clean" />
			
			<!-- performs build, without installing into repo (i.e. "install") -->
			<arg value="verify" />

			<arg value="checkstyle:checkstyle-aggregate" />

			<!-- shows errors -->
			<arg value="-e" />
			
			<!-- verbose mode -->
			<!-- <arg value="-X" /> -->

			<arg value="-P${buildProfiles}" />

			<arg value="-Doutput.flex=${output.flex}" />
			<arg value="-Doutput.java=${output.java}" />
			<arg value="-DappVersion=${version.appVersion}" />
			<arg value="-DapiVersion=${version.apiVersion}" />
			<arg value="-DqualifierSuffix=${version.qualifierSuffix}" />
			
			<!-- Java build -->
			<arg value="-Dos=${os}" />
			<arg value="-Dws=${ws}" />
			<arg value="-Darch=${arch}" />
			<arg value="-Dproduct-environment=${productEnvironment}" />
			<arg value="-Dversion.qualifierSuffixForFormat=${version.qualifierSuffixForFormat}" />

			<!-- Flex build -->
			<arg value="-DflexVersion=${flexVersion}" />
			<arg value="-DairVersion=${airVersion}" />
			<arg value="-DflexHome=${flexHome}" />
			<arg value="-Dkeystore.file=${keystore.file}" />
			<arg value="-Dkeystore.password=${keystore.password}" />
		</artifact:mvn>
		
		<record name="build.log" action="stop" loglevel="verbose" />
	</target>

</project>