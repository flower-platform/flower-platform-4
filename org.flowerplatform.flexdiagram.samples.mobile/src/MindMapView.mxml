<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!---
@author Cristian Spiescu
-->
<s:View title="MinMapView"
		   xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" xmlns:flexdiagram="org.flowerplatform.flexdiagram.*" xmlns:samples="org.flowerplatform.flexdiagram.samples.*"
		   xmlns:renderer="org.flowerplatform.flexdiagram.renderer.*" xmlns:infinitegroup="org.flowerplatform.flexdiagram.util.infinitegroup.*" 
		   xmlns:mindmap="org.flowerplatform.flexdiagram.samples.mindmap.*"
		   xmlns:m="org.flowerplatform.flexdiagram.mindmap.*"
		   creationComplete="creationCompleteHandler(event)">
	   <fx:Script>
		   <![CDATA[
			   import mx.collections.ArrayCollection;
			   import mx.core.FlexGlobals;
			   import mx.events.FlexEvent;
			   
			   import org.flowerplatform.flexdiagram.samples.IModelHolder;
			   import org.flowerplatform.flexdiagram.samples.mindmap.MindMapPopulator;
			   import org.flowerplatform.flexdiagram.samples.mindmap.model.SampleMindMapModel;
			   import org.flowerplatform.flexdiagram.tool.DragTool;
			   import org.flowerplatform.flexdiagram.tool.InplaceEditorTool;
			   import org.flowerplatform.flexdiagram.tool.ScrollTool;
			   import org.flowerplatform.flexdiagram.tool.SelectOnClickTool;
			   import org.flowerplatform.flexdiagram.tool.ZoomTool;
			   import org.flowerplatform.flexutil.FactoryWithInitialization;
			   
			   [Bindable]
			   protected var selectedItem:SampleMindMapModel;
			   			   
			   protected function creationCompleteHandler(event:FlexEvent):void {
				   MindMapPopulator.populateRootModel(IModelHolder(FlexGlobals.topLevelApplication));
				   
				   diagramShell.registerTool(ScrollTool.ID, new FactoryWithInitialization(ScrollTool));
				   diagramShell.registerTool(SelectOnClickTool.ID, new FactoryWithInitialization(SelectOnClickTool));
				   diagramShell.registerTool(ZoomTool.ID, new FactoryWithInitialization(ZoomTool));
				   diagramShell.registerTool(InplaceEditorTool.ID, new FactoryWithInitialization(InplaceEditorTool));
				   diagramShell.registerTool(DragTool.ID, new FactoryWithInitialization(DragTool));

				   MindMapDiagramRenderer(diagramShell.diagramRenderer).callLater(function():void {FlexGlobals.topLevelApplication.rootModel.expanded = true});
			   }
			   /**
				* @author Alexandra Topoloaga
				*/
			   protected function clickHandler(event:MouseEvent):void {
				   if (String(diagramShell.mainSelectedItem).indexOf("SampleMindMapModel") > 0) {
					   selectedItem = SampleMindMapModel(diagramShell.mainSelectedItem);
					   listofChildrenPanel.visible = true;
					   formPanel.visible = true;
					   propertiesForm.visible = true;
				   } else {
					   listofChildrenPanel.visible = false;
					   formPanel.visible = false;
					   propertiesForm.visible = false;
				   }
			   }
			   
			   public function onFontSizeChange():void {
				   if (textInputFontSize.text != '' && int(textInputFontSize.text) >= 0 && int(textInputFontSize.text) < 720 ) {
					   selectedItem.fontSize = int(textInputFontSize.text);	
				   }
			   }
			   
			   public function onIconChange():void {
				   selectedItem.icons = new ArrayCollection(iconsTextInput.text.split(","));
			   }
			   
			   
		   ]]>
	   </fx:Script>
	   <fx:Declarations>
		   <mindmap:SampleMindMapDiagramShell id="diagramShell" diagramRenderer="{diagramRenderer}" rootModel="{FlexGlobals.topLevelApplication.rootModel}"/>
	   </fx:Declarations>
	
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>	
	
	<s:VGroup width="40%">
		
		<s:Panel id="listofChildrenPanel" visible="false" width="100%"
				 title="List of children for selected node's parent">
			<s:List id="childrenProviderList" width="100%" borderVisible="false"
					dataProvider="{selectedItem.parent.children}"
					itemRenderer="org.flowerplatform.flexdiagram.samples.mindmap.renderer.SampleMindMapNodeRenderer"
					/>
		</s:Panel>
		
		
		<s:Panel id="formPanel" visible="false" width="100%" title="Properties Editor">
			<s:Form id="propertiesForm" visible="false">
				<s:layout>
					<s:FormLayout id="fromLayout" gap="-7"/>
				</s:layout>
				
				<s:FormItem label="Text:">
					<s:TextInput width="180" text="@{selectedItem.text}"/>
				</s:FormItem>
				
				<s:FormItem label="Font Family:">
					<s:DropDownList width="180" selectedItem="@{selectedItem.fontFamily}"> 
						<s:ArrayCollection>
							<fx:String>Arial</fx:String>
							<fx:String>Courier New</fx:String>
							<fx:String>Dialog</fx:String>
							<fx:String>DialogInput</fx:String>
							<fx:String>Lucida Sans</fx:String>
							<fx:String>Lucida Sans Typewriter</fx:String>
							<fx:String>Monospaced</fx:String>
							<fx:String>SansSerif</fx:String>
							<fx:String>Serif</fx:String>
							<fx:String>Times New Roman</fx:String>
						</s:ArrayCollection>
					</s:DropDownList>
				</s:FormItem>
				
				<s:FormItem label="Font Size:">
					<s:TextInput id="textInputFontSize" width="180" change="onFontSizeChange()"
								 text="{selectedItem.fontSize}"/>
				</s:FormItem>
				
				<s:FormItem label="Font Bold:">
					<s:CheckBox width="100%" fontWeight="bold" selected="@{selectedItem.fontWeight}"/> 
				</s:FormItem>
				
				<s:FormItem label="Font Italic:">
					<s:CheckBox width="100%" fontWeight="bold" selected="@{selectedItem.fontStyle}"/>
				</s:FormItem>
				
				<s:FormItem label="Text Color:">
				<!--	<s:TextInput id="textColorPicker" text="{selectedItem.textColor}" change="onColorChange()"/> -->
				</s:FormItem>
				
				<s:FormItem label="Background Color:">
					<!--	<s:TextInput id="backgroundColorPicker" text="@{selectedItem.background}"/> -->
				</s:FormItem>
				
				
				<s:FormItem label="Icons:">
					<s:TextInput id="iconsTextInput" width="180"
								 text="{selectedItem.icons.toArray().join()}"/>  
					<s:HGroup>
						<s:Graphic toolTip="Type the names of the icons you want to add (separated ONLY by a comma)             &#xd;Example of icons:             &#xd;-&gt; family.png            &#xd;-&gt; bee.png            &#xd;-&gt; group.png            &#xd;-&gt; wizard.png            &#xd;-&gt; smiley-angry.png            &#xd;-&gt; bookmark.png                        &#xd;            &#xd;Example of list: bee.png,penguin.png,family.png,wizard.png">
							<s:BitmapImage source="@Embed('../icons/info.png')"/>
						</s:Graphic> 
						<s:Button id="changeIconsButton" label="Change" click="onIconChange()"/>
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem id="cloudColorPickerForm" label="Cloud Color:">
					<!--	<s:TextInput id="cloudColorPicker" text="@{selectedItem.cloudColor}"/> -->
				</s:FormItem>
				
				<s:FormItem id="textInputCloudTypeForm" label="CloudType:">
					<s:DropDownList width="180" selectedItem="@{selectedItem.cloudType}"> 
						<s:ArrayCollection>
							<fx:String>No shape</fx:String>
							<fx:String>Rectangle shape</fx:String>
							<fx:String>Rounded rectangle shape</fx:String>
						</s:ArrayCollection>
					</s:DropDownList>
				</s:FormItem>
				
			</s:Form>	
		</s:Panel>
		
	</s:VGroup>
	
	   <infinitegroup:InfiniteScroller id="scroller" width="100%" height="100%" >
		   <m:MindMapDiagramRenderer id="diagramRenderer" width="100%" height="100%" />			   
	   </infinitegroup:InfiniteScroller>
   </s:View>