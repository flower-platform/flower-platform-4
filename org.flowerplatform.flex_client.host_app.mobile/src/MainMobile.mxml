<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!---
@author Cristian Spiescu
-->
<flexutil_mobile:FlowerViewNavigatorApplication 
	applicationDPI="160" creationComplete="creationCompleteHandler()"
	xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:flexutil_mobile="org.flowerplatform.flexutil.mobile.*"   
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mobile="org.flowerplatform.flex_client.host_app.mobile.*">
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mobile "org.flowerplatform.web.mobile.*";
		@namespace texteditor "com.crispico.flower.texteditor.*";
		
		.borderlessButton {
			/* used for the buttons shown on diagrams */
			skinClass: ClassReference("spark.skins.mobile.supportClasses.ButtonSkinBase");
		}
		
		s|TextInput {
			skinClass: ClassReference("org.flowerplatform.flex_client.host_app.mobile.text.ValidatingTextInputSkin")
		}
		
		texteditor|SyntaxTextEditor {
			skinClass: ClassReference("org.flowerplatform.flex_client.host_app.mobile.text.RichEditableTextAreaSkin");
		}
		
		s|FormItem {
			skinClass: ClassReference("org.flowerplatform.flexutil.form.FlowerFormItemSkin");
		}
		
		s|ActionBar s|Label {
			color: #FFFFFF;
			fontSize: 28;
			fontWeight: bold;
			paddingLeft: 5;
			alignmentBaseline: descent;
		}
		
		@media (application-dpi: 160) {
			s|ActionBar s|Label {
				fontSize: 18;
			}
		}
		
		@media (application-dpi: 320) {
			s|ActionBar s|Label {
				fontSize: 36;
			}
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.flextras.mobile.dropDownList.DropDownList;
			
			import mx.core.FlexGlobals;
			
			import spark.core.ContentCache;
			
			import org.flowerplatform.flex_client.codesync.CodeSyncPlugin;
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.host_app.mobile.view_content_host.WorkbenchMobileSplitViewHost;
			import org.flowerplatform.flex_client.host_app.mobile.view_edit_server_account.EditServerAccountView;
			import org.flowerplatform.flex_client.host_app.mobile.view_edit_server_account.EditServerAccountViewProvider;
			import org.flowerplatform.flex_client.host_app.mobile.view_server_account.ServerAccountsViewProvider;
			import org.flowerplatform.flex_client.mindmap.MindMapPlugin;
			import org.flowerplatform.flex_client.properties.PropertiesPlugin;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.mobile.view_content_host.MobileViewHostPopupHandlerFactory;
			import org.flowerplatform.flexutil.mobile.view_content_host.ProgressMonitorSpinnerHandlerFactory;
			import org.flowerplatform.flexutil.plugin.AbstractFlexPlugin;
			import org.flowerplatform.flexutil.plugin.FlexPluginDescriptor;
			import org.flowerplatform.flexutil.popup.AlertPopupMessageBoxFactory;
			
			// explicitely write the class name; a simple import won't actually compile this class
			// used from properties
			com.flextras.mobile.dropDownList.DropDownList;
			
			public static function get mainApp():MainMobile {
				return MainMobile(FlexGlobals.topLevelApplication);
			}
			
			public static function openAccountsButtonClickHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()				
					.setViewIdInWorkbench("serverAccounts")
					.setTitle("Server Accounts")
					.show();
			}
			/**
			 * We need to inject the plugin URL, so that the plugins can find resources and messages.
			 */
			private function setDescriptorWithUrl(plugin:AbstractFlexPlugin, url:String):AbstractFlexPlugin {
				var descriptor:FlexPluginDescriptor = new FlexPluginDescriptor();
				descriptor.url = url;
				plugin.flexPluginDescriptor = descriptor;
				return plugin;
			}
			
			private var plugins:Array = [
				setDescriptorWithUrl(new CorePlugin(), 'servlet/public-resources/org.flowerplatform.flex_client.core/swc/org.flowerplatform.flex_client.core.swc|library.swf'),
				setDescriptorWithUrl(new PropertiesPlugin(), 'servlet/public-resources/org.flowerplatform.flex_client.properties/swc/org.flowerplatform.flex_client.properties.swc|library.swf'),
				setDescriptorWithUrl(new MindMapPlugin(), 'servlet/public-resources/org.flowerplatform.flex_client.mindmap/swc/org.flowerplatform.flex_client.mindmap.swc|library.swf?pluginClass=MindMapPlugin'),
				setDescriptorWithUrl(new CodeSyncPlugin(), 'servlet/public-resources/org.flowerplatform.flex_client.codesync/swc/org.flowerplatform.flex_client.codesync.swc|library.swf?pluginClass=CodeSyncPlugin')
			];
			
			private function startPlugins():void {
				for each (var plugin:AbstractFlexPlugin in plugins) {
					plugin.preStart();
				}
				for each (plugin in plugins) {
					plugin.start();
				}
			}
			
			protected function creationCompleteHandler():void {
				navigator.defaultPushTransition = crossFadeTransition;
				navigator.defaultPopTransition = crossFadeTransition;
				navigator.navigationContent = mainNavigatorContent.navigatorContent;
				
//				navigator.pushView(RecentActivityView);
				
				var imageContentCache:ContentCache = new ContentCache();
				imageContentCache.enableCaching = true;
				imageContentCache.maxCacheEntries = 300;
				FlexUtilGlobals.getInstance().imageContentCache = imageContentCache;
				
				FlexUtilGlobals.getInstance().isMobile = true;	
				FlexUtilGlobals.getInstance().popupHandlerFactory = new MobileViewHostPopupHandlerFactory();
				FlexUtilGlobals.getInstance().messageBoxFactory = new AlertPopupMessageBoxFactory();
				FlexUtilGlobals.getInstance().progressMonitorHandlerFactory = new ProgressMonitorSpinnerHandlerFactory();
				FlexUtilGlobals.getInstance().rootUrl = "http://localhost:8080/org.flowerplatform.host.web_app/";
				
				startPlugins();
				
				navigator.pushView(WorkbenchMobileSplitViewHost);
				FlexUtilGlobals.getInstance().composedViewProvider.addViewProvider(new ServerAccountsViewProvider());
				FlexUtilGlobals.getInstance().composedViewProvider.addViewProvider(new EditServerAccountViewProvider());
//				CommunicationPlugin.getInstance().bridge.addEventListener(BridgeEvent.WELCOME_RECEIVED_FROM_SERVER, welcomeReceivedFromServerHandler);
			}
			
//			protected function welcomeReceivedFromServerHandler(event:BridgeEvent):void {
//				navigator.pushView(WorkbenchMobileSplitViewHost);
//			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mobile:MainNavigatorContent id="mainNavigatorContent" navigator="{navigator}"/>
		<s:CrossFadeViewTransition id="crossFadeTransition"/>
	</fx:Declarations>
	<!--	<s:ViewNavigator id="navigator1" width="100%" height="100%" firstView="org.flowerplatform.web.mobile.RecentActivityView"
	navigationContent="{mainNavigatorContent.navigatorContent}" defaultPushTransition="{crossFadeTransition}" defaultPopTransition="{crossFadeTransition}">
	</s:ViewNavigator>
	</s:Application>-->
</flexutil_mobile:FlowerViewNavigatorApplication>
