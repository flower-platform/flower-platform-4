<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!---
@author Cristian Spiescu
-->
<flexutil_mobile:FlowerViewNavigatorApplication 
	applicationDPI="160" creationComplete="creationCompleteHandler()"
	xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:flexutil_mobile="org.flowerplatform.flexutil.mobile.*"   
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mobile="org.flowerplatform.flex_client.host_app.mobile.*"
	implements="org.flowerplatform.flexutil.dialog.IDialogResultHandler" >
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mobile "org.flowerplatform.web.mobile.*";
		@namespace texteditor "com.crispico.flower.texteditor.*";
		
		s|TextInput {
			skinClass: ClassReference("org.flowerplatform.flexutil.mobile.text.ValidatingTextInputSkin")
		}
		
		s|FormItem {
			skinClass: ClassReference("org.flowerplatform.flexutil.form.FlowerFormItemSkin");
		}
		
		s|ActionBar s|Label {
			color: #FFFFFF;
			fontSize: 28;
			fontWeight: bold;
			paddingLeft: 5;
			alignmentBaseline: descent;
		}
		
		s|TextArea {
			skinClass: ClassReference("spark.skins.mobile.TextAreaSkin");
		}
		
		@media (application-dpi: 160) {
			s|ActionBar s|Label {
				fontSize: 18;
			}
		}
		
		@media (application-dpi: 320) {
			s|ActionBar s|Label {
				fontSize: 36;
			}
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.flextras.mobile.dropDownList.DropDownList;
			
			import es.xperiments.media.StageWebViewBridge;
			import es.xperiments.media.StageWebViewBridgeEvent;
			import es.xperiments.media.StageWebViewDisk;
			import es.xperiments.media.StageWebviewDiskEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			
			import spark.core.ContentCache;
			
			import org.flowerplatform.flex_client.codesync.CodeSyncPlugin;
			import org.flowerplatform.flex_client.core.CoreConstants;
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.host_app.mobile.view_content_host.WorkbenchMobileSplitViewHost;
			import org.flowerplatform.flex_client.host_app.mobile.view_edit_server_account.CommunicationErrorView;
			import org.flowerplatform.flex_client.host_app.mobile.view_edit_server_account.EditServerAccountView;
			import org.flowerplatform.flex_client.host_app.mobile.view_server_account.ServerAccount;
			import org.flowerplatform.flex_client.host_app.mobile.view_server_account.ServerAccountsView;
			import org.flowerplatform.flex_client.host_app.mobile.view_server_account.ServerAccountsViewProvider;
			import org.flowerplatform.flex_client.mindmap.MindMapPlugin;
			import org.flowerplatform.flex_client.properties.PropertiesPlugin;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexutil.FlexUtilAssets;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.mobile.view_content_host.MobileViewHostPopupHandlerFactory;
			import org.flowerplatform.flexutil.mobile.view_content_host.ProgressMonitorSpinnerHandlerFactory;
			import org.flowerplatform.flexutil.plugin.AbstractFlexPlugin;
			import org.flowerplatform.flexutil.plugin.FlexPluginDescriptor;
			import org.flowerplatform.flexutil.popup.AlertPopupMessageBoxFactory;
			import org.flowerplatform.flexutil.spinner.LogoSpinner;
			import org.flowerplatform.flexutil.spinner.ModalSpinner;
			
			// explicitely write the class name; a simple import won't actually compile this class
			// used from properties
			com.flextras.mobile.dropDownList.DropDownList;
			
			public static function get mainApp():MainMobile {
				return MainMobile(FlexGlobals.topLevelApplication);
			}
			
			public static function openAccountsButtonClickHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()				
					.setViewIdInWorkbench(ServerAccountsViewProvider.ID)
					.setTitle(Resources.getMessage("mobile.server.accounts.title"))
					.show();
			}
			/**
			 * We need to inject the plugin URL, so that the plugins can find resources and messages.
			 */
			private function setDescriptorWithUrl(plugin:AbstractFlexPlugin, url:String):AbstractFlexPlugin {
				var descriptor:FlexPluginDescriptor = new FlexPluginDescriptor();
				descriptor.url = url;
				plugin.flexPluginDescriptor = descriptor;
				
				return plugin;
			}
			
			private var plugins:Array = [
				setDescriptorWithUrl(new CorePlugin(), 'servlet/public-resources/org.flowerplatform.flex_client.core/swc/org.flowerplatform.flex_client.core.swc|library.swf'),
				setDescriptorWithUrl(new PropertiesPlugin(), 'servlet/public-resources/org.flowerplatform.flex_client.properties/swc/org.flowerplatform.flex_client.properties.swc|library.swf'),
				setDescriptorWithUrl(new MindMapPlugin(), 'servlet/public-resources/org.flowerplatform.flex_client.mindmap/swc/org.flowerplatform.flex_client.mindmap.swc|library.swf?pluginClass=MindMapPlugin'),
				setDescriptorWithUrl(new CodeSyncPlugin(), 'servlet/public-resources/org.flowerplatform.flex_client.codesync/swc/org.flowerplatform.flex_client.codesync.swc|library.swf?pluginClass=CodeSyncPlugin')
			];
			
			private function startPlugins():void {
				setBackButtonEnabled(true);
				for each (var plugin:AbstractFlexPlugin in plugins) {					
					plugin.preStart();
				}
				for each (plugin in plugins) {					
					plugin.start();
				}
				
				var isAndroid:Boolean = true;
				if (isAndroid) {
					CorePlugin.getInstance().serviceLocator.invoke("coreService.getSessionId", null, function(sessionId:String):void {
						StageWebViewDisk.addEventListener(StageWebviewDiskEvent.END_DISK_PARSING, function onDiskCacheEnd(e:StageWebviewDiskEvent):void {
							var jsBridge:StageWebViewBridge = new StageWebViewBridge();
							jsBridge.addEventListener(StageWebViewBridgeEvent.DOM_LOADED, function(event:StageWebViewBridgeEvent):void {
								jsBridge.call("setSessionId", null, sessionId);
								jsBridge.call("login");
							});
							jsBridge.loadURL(FlexUtilGlobals.getInstance().createAbsoluteUrl("login.html?isMobile=true"));
						});
						
						//
						StageWebViewDisk.initialize(MainMobile.mainApp.stage);
					});
				}
			}
			
			/**
			 * @author Cristian Spiescu
			 * @author Sebastian Solomon
			 */
			protected function creationCompleteHandler():void {
				navigator.defaultPushTransition = crossFadeTransition;
				navigator.defaultPopTransition = crossFadeTransition;
				navigator.navigationContent = mainNavigatorContent.navigatorContent;
				
				var imageContentCache:ContentCache = new ContentCache();
				imageContentCache.enableCaching = true;
				imageContentCache.maxCacheEntries = 300;
				FlexUtilGlobals.getInstance().imageContentCache = imageContentCache;
				
				FlexUtilGlobals.getInstance().isMobile = true;	
				FlexUtilGlobals.getInstance().popupHandlerFactory = new MobileViewHostPopupHandlerFactory();
				FlexUtilGlobals.getInstance().messageBoxFactory = new AlertPopupMessageBoxFactory();
				FlexUtilGlobals.getInstance().progressMonitorHandlerFactory = new ProgressMonitorSpinnerHandlerFactory();
				
				
				navigator.pushView(WorkbenchMobileSplitViewHost);
				FlexUtilGlobals.getInstance().composedViewProvider.addViewProvider(new ServerAccountsViewProvider());
				FlexUtilGlobals.getInstance().clientCommunicationErrorViewContent = CommunicationErrorView;
				var serverAccounts:ArrayCollection = ServerAccountsView.getSharedObject().data.serverAccounts;
				
				if (serverAccounts == null || serverAccounts.length == 0 ) {
					// add FP hub
					var hub:ServerAccount = new ServerAccount();
					hub.host = "http://hub.flower-platform.com/";
					hub.friendlyName = "Flower Platform Hub";
					hub.user = "";
					hub.isDefault = true;
					if (serverAccounts == null) {
						serverAccounts = new ArrayCollection();
					}
					serverAccounts.addItem(hub);
					ServerAccountsView.getSharedObject().data.serverAccounts = serverAccounts;
					ServerAccountsView.getSharedObject().flush(10000);
				}
				
				if (serverAccounts == null || serverAccounts.length == 0 ) { // if no account
					openEditAccount();
					setBackButtonEnabled(false);
				} else {
					var hasDefaultAccount:Boolean = false;
					for (var i:int=0; i<serverAccounts.length; i++) {
						if (serverAccounts[i].isDefault == true) {
							hasDefaultAccount = true;
							handleDialogResult(serverAccounts[i]);
							break;
						}
					}
					if (!hasDefaultAccount) { // if no default
						setBackButtonEnabled(false);
						var serverAccountsView:ServerAccountsView = new ServerAccountsView();
						serverAccountsView.setResultHandler(this);
						FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
							.setTitle(Resources.getMessage("mobile.select.server.account.title"))
							.setViewContent(serverAccountsView)
							.show();
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
							.setText(Resources.getMessage("mobile.select.default.account.message"))
							.setWidth(300)
							.setHeight(200)
							.addButton(FlexUtilAssets.INSTANCE.getMessage('dialog.ok'))
							.showMessageBox();
					}
				}
			}
			
			/**
			 * @author Sebastian Solomon
			 */
			private function openEditAccount():void {
				var editAccountView:EditServerAccountView = new EditServerAccountView();
				editAccountView.setResultHandler(this);
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
					.setTitle(Resources.getMessage("mobile.edit.server.account.title"))
					.setViewContent(editAccountView)
					.show();
			}
			
			/**
			 * @author Sebastian Solomon
			 */
			public function handleDialogResult(result:Object):void {
				if (result == null) {
					FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setText(Resources.getMessage("mobile.no.default.account.message"))
						.setWidth(300)
						.setHeight(200)
						.addButton(FlexUtilAssets.INSTANCE.getMessage('dialog.ok'))
						.showMessageBox();
				} else {
					// INITIALIZATION SPINNER START
					ModalSpinner.addGlobalModalSpinner(Resources.getMessage("spinner.initialize"), new LogoSpinner(FlexUtilAssets.logoFlower));
					
					//TODO add user/password
					FlexUtilGlobals.getInstance().rootUrl = result.host;
					
					startPlugins();
														
					CorePlugin.getInstance().handleLinkForCommand(CoreConstants.OPEN_RESOURCES, "(root||)");
				}
			}
			
			/**
			 * @author Sebastian Solomon
			 */
			private function openServerAccountsView():void {
				openAccountsButtonClickHandler();
			}
			
			/**
			 * @author Sebastian Solomon
			 */
			private function setBackButtonEnabled(enabled:Boolean):void {
				for (var i: int = 0; i < navigator.navigationContent.length; i++) {
					if (navigator.navigationContent[i].id == "backButton") {
						navigator.navigationContent[i].enabled = enabled;
						return;
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mobile:MainNavigatorContent id="mainNavigatorContent" navigator="{navigator}"/>
		<s:CrossFadeViewTransition id="crossFadeTransition"/>		
	</fx:Declarations>
</flexutil_mobile:FlowerViewNavigatorApplication>
