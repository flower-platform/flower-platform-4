<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!---
@author Sebastian Solomon
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="creationCompleteHandler(event)"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, mx.managers.IFocusManagerComponent, org.flowerplatform.flexutil.dialog.IDialog">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.flex_client.core.CoreConstants;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			protected var _viewHost:IViewHost;
			
			protected var resultHandler:IDialogResultHandler;
			
			public static function  getSharedObjectServerAccountList():ArrayCollection {
				var sharedObject:SharedObject = getSharedObject();
				return sharedObject.data.serverAccounts;
			}
			
			public static function  getSharedObject():SharedObject {
				return SharedObject.getLocal(CoreConstants.FLOWER_PLATFORM);
			}
			
			protected function creationCompleteHandler(flexvent:FlexEvent):void {
				refresh();
			}
			
			public function refresh():void {
				var serverAccountList:ArrayCollection = getSharedObjectServerAccountList();
				var factory:ClassFactory = new ClassFactory(ServerAccountDataRenderer);
				factory.properties = {serverAccountView: this};
				accountList.itemRenderer = factory;
				accountList.dataProvider = serverAccountList;
			}
			
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
			}
			
			public function getResultHandler():IDialogResultHandler {
				return resultHandler;
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				var vector:Vector.<IAction> = new Vector.<IAction>;
				var addAccountAction:AddServerAccountAction = new AddServerAccountAction();
				addAccountAction.serverAccountView = this;
				addAccountAction.icon = Resources.addIcon;
				vector[0] = addAccountAction;
				return vector;
			}
			
			public function deselectDefaultAccount():ArrayCollection {
				var accountList:ArrayCollection = getSharedObjectServerAccountList();
				for (var i:int=0; i<accountList.length; i++) {
					if (accountList[i].isDefault == true) {
						accountList[i].isDefault = false;
						var serverAccountRenderer:ServerAccountDataRenderer = this.accountList.dataGroup.getElementAt(i) as ServerAccountDataRenderer;
						serverAccountRenderer.checkBox.selected = false;
					}
				}
				return accountList;
			}
			
			public function setDefaultAccount(data:Object):void {
				var accountList:ArrayCollection = deselectDefaultAccount();
				for (var i:int=0; i < accountList.length; i++) {
					if (accountList[i].friendlyName == data.friendlyName &&
						accountList[i].host == data.host &&
						accountList[i].user == data.user &&
						accountList[i].password == data.password) {
						
						accountList[i].isDefault = true;
						var serverAccountRenderer:ServerAccountDataRenderer = this.accountList.dataGroup.getElementAt(i) as ServerAccountDataRenderer;
						serverAccountRenderer.checkBox.selected = true;
					}
				}
				saveAccountsToSharedObject(accountList);
			}
			
			public function saveAccountsToSharedObject(accountList:ArrayCollection):void {
				var sharedObject:SharedObject = getSharedObject();
				sharedObject.data.serverAccounts = accountList;
				sharedObject.flush(10000);
			}
			
			public function setResultHandler(resultHandler:IDialogResultHandler):void {
				this.resultHandler = resultHandler;
			}
			
			public function closeView():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
		]]>
	</fx:Script>
	
	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" height="100%">			
			<s:List id="accountList" width="100%" height="100%"> 
			</s:List>
		</s:Group>
	</s:Scroller>
</s:Group>