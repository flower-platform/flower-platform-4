<!--
@author Vlad Bogdan Manica
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:ns="org.flowerplatform.flexutil.view_content_host.*"		
		  creationComplete="creationCompleteHandler(event)"
		  implements="org.flowerplatform.flexutil.view_content_host.IViewContent" xmlns:ns1="org.flowerplatform.flex_client.resources.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridSelectionEvent;
			
			import org.flowerplatform.flex_client.core.CoreConstants;
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flex_client.team.git.GitConstants;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.Utils;
			import org.flowerplatform.flexutil.selection.ISelectionProvider;
			import org.flowerplatform.flexutil.selection.SelectionChangedEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			[Bindable]
			public var nodeUri:String;
			
			[Bindable]
			public var repo:String;
			
			[Bindable]
			public var historyData:ArrayCollection;
			
			[Bindable]
			public var commitedFiles:ArrayCollection;
			
			[Bindable]
			public var files:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			public var branchNames:ArrayCollection = new ArrayCollection;
			
			[Bindable] 
			public var content:String = new String;
			
			protected var _viewHost:IViewHost;
			
			[Bindable]
			public var maxGraphWidth:Number = new Number();
			
			public function creationCompleteHandler(flexvent:FlexEvent):void{
				Utils.makePseudoDisabled(infoRepo);
				refreshFromSelection();
				commitTextArea.addEventListener(TextEvent.LINK,handleLink);
			}
			
			private function refreshHandler():void {
				initView();	
			}		
			
			private function refreshFromSelection():void {
				var activeSelectionProvider:ISelectionProvider = FlexUtilGlobals.getInstance().selectionManager.activeSelectionProvider;
				if (activeSelectionProvider != null) {
					// create dummy event
					var event:SelectionChangedEvent = new SelectionChangedEvent();
					event.selection = activeSelectionProvider.getSelection();
					selectionChangedHandler(event);
				}
			}
			
			private function selectionChangedHandler(event:SelectionChangedEvent):void {
				if (event.selection == null || event.selection.length == 0 || !(event.selection.getItemAt(0) is Node)) { 
					// happens when changing active view
					return;
				}		
				var node:Node = Node(event.selection.getItemAt(0));
				
				var index:int = node.nodeUri.indexOf("|");
				if (index < 0) {
					index = node.nodeUri.length;
				}
				repo = node.nodeUri.substring(node.nodeUri.indexOf(":") + 1, index);
				if (CorePlugin.getInstance().nodeTypeDescriptorRegistry.getOrCreateTypeDescriptor(node.type).categories.getItemIndex(GitConstants.GIT_CATEGORY) >= 0 ||
					node.type == CoreConstants.FILE_NODE_TYPE ||
					node.type == CoreConstants.FILE_SYSTEM_NODE_TYPE) {
					nodeUri = node.nodeUri;
					initView();							
				}				
			}
			
			private function initView(): void {
				infoRepo.text = Resources.getMessage("flex_client.team.git.action.history.ui.Repository",[repo]);
				CorePlugin.getInstance().serviceLocator.invoke("gitHistoryService.getLogEntries", [nodeUri],
					function(data:ArrayCollection):void {
						historyData = data; 
						grid.selectedItem = historyData.getItemAt(0); 
						grid.ensureCellIsVisible(grid.selectedIndex);
						updateWindows(null);
					});
			}
			
			private function updateWindows(event:GridSelectionEvent):void {
				var node:Node = Node(grid.selectedItem);
				CorePlugin.getInstance().serviceLocator.invoke("gitHistoryService.getCommitBranches", [node.nodeUri, String(node.getPropertyValue(GitConstants.ID))],function(data:ArrayCollection):void {branchNames = data; textAreaHandler(event);})
				CorePlugin.getInstance().serviceLocator.invoke("gitHistoryService.getCommitedData", [node.nodeUri, String(node.getPropertyValue(GitConstants.ID))],function(data:ArrayCollection):void {files = data;})
			}	
			
			public function additionalCloseHandler():void {
				// do nothing			
			}
			
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
			}
			
			private function getLabel(item:Object, column:GridColumn):String {		
				switch (column.dataField) {
					case GitConstants.ID: 
						return Node(item).getPropertyValue(GitConstants.ID);
					case GitConstants.ENTRY_SHORT_ID:
						return Node(item).getPropertyValue(GitConstants.ENTRY_SHORT_ID);
					case GitConstants.SHORT_MESSAGE:
						return Node(item).getPropertyValue(GitConstants.SHORT_MESSAGE);
					case GitConstants.AUTHOR:
						return Node(item).getPropertyValue(GitConstants.AUTHOR)+" <"+Node(item).getPropertyValue(GitConstants.AUTHOR_EMAIL)+">";
					case GitConstants.AUTHORED_DATE:
						return formatDateTime.format(Node(item).getPropertyValue(GitConstants.AUTHORED_DATE));
					case GitConstants.COMMITTER:
						return Node(item).getPropertyValue(GitConstants.COMMITTER)+" <"+Node(item).getPropertyValue(GitConstants.COMMITTER_EMAIL)+">";
					case GitConstants.COMMITER_DATE:
						return  formatDateTime.format(Node(item).getPropertyValue(GitConstants.COMMITER_DATE));
					default:
						return null;
				}
			}
		
			public function handleLink(evt:TextEvent):void {
				var n:Number = historyData.length;
				for (var i:Number = 0; i < n; i++) {
					var node:Node = Node(historyData.getItemAt(i));
					if ( String(node.getPropertyValue(GitConstants.ID)) == evt.text) {
						grid.selectedItem = node;
						updateWindows(null);
						grid.ensureCellIsVisible(grid.selectedIndex);
						break;
					}
				}
			}
			
			public function linkFormat(commitId:String):String {
				return Resources.getMessage("flex_client.team.git.action.history.ui.linkFormat", [commitId]);
			}
			
			private function textAreaHandler(event:GridSelectionEvent):void {
				var node:Node = Node(grid.selectedItem);
				var parents:String = "";
				var parentsLen:Number = ArrayCollection(node.getPropertyValue(GitConstants.PARENT)).length;
				for (var i:Number = 0; i < parentsLen; i+=2) {
					parents += Resources.getMessage("flex_client.team.git.action.history.ui.parents", [
						linkFormat(String(ArrayCollection(node.getPropertyValue(GitConstants.PARENT)).getItemAt(i))),
						ArrayCollection(node.getPropertyValue(GitConstants.PARENT)).getItemAt(i+1)
					]);					
				}		
				var childrens:String = "";
				var childsLen:Number = ArrayCollection(node.getPropertyValue(GitConstants.CHILD)).length;
				for (i = 0; i < childsLen; i+=2) {
					childrens += Resources.getMessage("flex_client.team.git.action.history.ui.childrens", [
						linkFormat(String(ArrayCollection(node.getPropertyValue(GitConstants.CHILD)).getItemAt(i))),
						ArrayCollection(node.getPropertyValue(GitConstants.CHILD)).getItemAt(i+1)
					]);	
				}
				var branches:String = Resources.getMessage("flex_client.team.git.action.history.ui.branches");
				branches += branchNames.source.join(", ");
				var tags:String = "";
				if (node.getPropertyValue(GitConstants.TAGS) != null) {
					tags = Resources.getMessage("flex_client.team.git.action.history.ui.tags", [node.getPropertyValue(GitConstants.TAGS)]);
				}
				var longMessage:String = Resources.getMessage("flex_client.team.git.action.history.ui.longMessage", [String(node.getPropertyValue(GitConstants.LONG_MESSAGE))]);
				
				//FULL MESSAGE
				content = Resources.getMessage("flex_client.team.git.action.history.ui.historyTextArea",[
					node.getPropertyValue(GitConstants.ID),
					node.getPropertyValue(GitConstants.AUTHOR),
					node.getPropertyValue(GitConstants.AUTHOR_EMAIL),					
					formatDateTime.format(node.getPropertyValue(GitConstants.AUTHORED_DATE)),
					node.getPropertyValue(GitConstants.COMMITTER),
					node.getPropertyValue(GitConstants.COMMITTER_EMAIL),
					formatDateTime.format(node.getPropertyValue(GitConstants.COMMITER_DATE)),
					parents,
					childrens,
					branches,
					tags,
					longMessage
					]);
			}	
		
			private function showCommitMessageHandler(event:MouseEvent):void {	
				if (event.target.selected == true) {
					commitTextArea.includeInLayout = commitTextArea.visible = hGroup.includeInLayout = true;
				} else {
					commitTextArea.includeInLayout = commitTextArea.visible = false;
					if (filesButton.selected == false) {
						hGroup.includeInLayout = false;
					}
				}		
			}
			
			private function showFilesHandler(event:MouseEvent):void {				
				if (event.target.selected == true) {
					commitList.includeInLayout = commitList.visible = hGroup.includeInLayout = true;
				} else {
					commitList.includeInLayout = commitList.visible = false;
					if (commentsButton.selected == false) {
						hGroup.includeInLayout = false;
					}
				}		
			}
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">	
		<s:HGroup width="100%" height="4%">
			<s:TextInput id="infoRepo" width="100%" height="100%"/>	
			<s:Button width="4%" height="100%" click="refreshHandler()" icon="{Resources.refreshIcon}"/>
			<s:Button width="4%" height="100%" click="refreshFromSelection()" icon="{Resources.switchIcon}"/>
			<s:ToggleButton id="commentsButton" width="4%" height="100%"
							click="showCommitMessageHandler(event)" icon="{Resources.commentsIcon}"
							selected="true"/>
			<s:ToggleButton id="filesButton" width="4%" height="100%" click="showFilesHandler(event)"
							icon="{Resources.flatLayoutIcon}" selected="true"/>
		</s:HGroup>
		
		<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{historyData}"
					selectionChange="updateWindows(event)" sortableColumns="false">
			<s:columns> 
				<s:ArrayList>
					<s:GridColumn minWidth="50" dataField="drawings"
								  headerText=""
								  itemRenderer="org.flowerplatform.flex_client.team.git.history.HistoryDrawingBox"/>
					
					<s:GridColumn dataField="ShortId" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelId')}" labelFunction="getLabel"/>				
					<s:GridColumn id="messageColumn" dataField="shortMessage" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelMessage')}"
								  itemRenderer="org.flowerplatform.flex_client.team.git.history.ui.GridColumnItemRenderer"
								  labelFunction="getLabel"/>
					<s:GridColumn dataField="author" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelAuthor')}" labelFunction="getLabel"/>
					<s:GridColumn dataField="AuthoredDate" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelAuthoredDate')}"
								  labelFunction="getLabel"/>
					<s:GridColumn dataField="committer" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelCommitter')}" labelFunction="getLabel"/>
					<s:GridColumn dataField="CommitteredDate" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelCommittedDate')}"
								  labelFunction="getLabel"/>
					
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	
	
		<s:HGroup id="hGroup" width="100%" height="100%">
			<mx:TextArea id="commitTextArea" width="100%" height="100%" editable="false" htmlText="{content}"/>
			<s:List id="commitList" width="100%" height="100%" dataProvider="{files}" >
					<s:itemRenderer>
						<fx:Component>
							<s:ItemRenderer>
								<fx:Script>
									<![CDATA[
										import org.flowerplatform.flex_client.resources.Resources;
									]]>
								</fx:Script>
								<s:HGroup verticalAlign="middle" >	
									<s:Image source="{Resources.fileIcon}"/>
									<s:Label text="{this.data}"/>
								</s:HGroup>
							</s:ItemRenderer>
						</fx:Component>
					</s:itemRenderer>			
			</s:List>		
		</s:HGroup>	
	</s:VGroup>
		
	<fx:Declarations>
		<mx:DateFormatter id="formatDateTime" formatString="YYYY-DD-MM HH:NN:SS" />
	</fx:Declarations>		
	
</s:VGroup>