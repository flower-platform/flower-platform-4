
<!-- 
	license-start
 
	Copyright (C) 2008 - 2014 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!--
@author Vlad Bogdan Manica
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:ns="org.flowerplatform.flexutil.view_content_host.*"		
		  creationComplete="creationCompleteHandler(event)"
		  implements="org.flowerplatform.flexutil.view_content_host.IViewContent" xmlns:ns1="org.flowerplatform.flex_client.resources.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridSelectionEvent;
			
			import org.flowerplatform.flex_client.core.CoreConstants;
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flex_client.team.git.GitConstants;
			import org.flowerplatform.flex_client.team.git.action.CheckoutAction;
			import org.flowerplatform.flex_client.team.git.action.CherryPickAction;
			import org.flowerplatform.flex_client.team.git.action.CopyIdToClipboard;
			import org.flowerplatform.flex_client.team.git.action.CreateBranchAction;
			import org.flowerplatform.flex_client.team.git.action.MergeAction;
			import org.flowerplatform.flex_client.team.git.action.ResetAction;
			import org.flowerplatform.flex_client.team.git.action.RevertCommitAction;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.Utils;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.context_menu.FillContextMenuEvent;
			import org.flowerplatform.flexutil.selection.ISelectionProvider;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			[Bindable]
			public var nodeUri:String;
			
			[Bindable]
			public var historyData:ArrayCollection;
			
			[Bindable]
			public var files:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			public var branchNames:ArrayCollection = new ArrayCollection;
			
			protected var _viewHost:IViewHost;
			
			public function creationCompleteHandler(flexvent:FlexEvent):void{
				Utils.makePseudoDisabled(infoRepo);
				refreshFromSelection();
				
				commitTextArea.addEventListener(TextEvent.LINK, handleLink);
				grid.addEventListener(FillContextMenuEvent.FILL_CONTEXT_MENU, fillContextMenuHandler);
			}
			
			public function fillContextMenuHandler(event:FillContextMenuEvent):void {
				event.allActions = getActions(new ArrayCollection([grid.selectedItem]));
				event.selection = new ArrayCollection([grid.selectedItem]);
				event.rootActionsAlreadyCalculated = null;
			}
			
			private function refresh():void {
				infoRepo.text = Resources.getMessage("flex_client.team.git.action.history.ui.Repository", [CorePlugin.getInstance().getRepository(nodeUri)]);
				CorePlugin.getInstance().serviceLocator.invoke("gitHistoryService.getLogEntries", [nodeUri],
					function(data:ArrayCollection):void {
						historyData = data; 
						grid.selectedItem = historyData.getItemAt(0); 
						grid.ensureCellIsVisible(grid.selectedIndex);
						updateAdditionalInfo();
					});
			}		
			
			private function refreshFromSelection():void {
				var activeSelectionProvider:ISelectionProvider = FlexUtilGlobals.getInstance().selectionManager.activeSelectionProvider;
				var selection:IList = activeSelectionProvider.getSelection();
				if (activeSelectionProvider != null) {
					if (selection == null || selection.length == 0 || !(selection.getItemAt(0) is Node)) { 
						// happens when changing active view
						return;
					}	
					var node:Node = Node(selection.getItemAt(0));
					if (node != null) {
						if ((CorePlugin.getInstance().nodeTypeDescriptorRegistry.getOrCreateTypeDescriptor(node.type).categories.getItemIndex(GitConstants.GIT_CATEGORY) >= 0) && (node.getPropertyValue(GitConstants.IS_GIT_REPOSITORY)) ||
							node.type == CoreConstants.FILE_NODE_TYPE ||
							node.type == CoreConstants.FILE_SYSTEM_NODE_TYPE) {
							nodeUri = node.nodeUri;
							refresh();							
						}
					}
				}
			}
			
			private function updateAdditionalInfo(event:GridSelectionEvent = null):void {
				var node:Node = Node(grid.selectedItem);
				CorePlugin.getInstance().serviceLocator.invoke("gitHistoryService.getCommitBranches", [node.nodeUri, String(node.getPropertyValue(GitConstants.ID))], function(data:ArrayCollection):void {branchNames = data; textAreaHandler(event);})
				CorePlugin.getInstance().serviceLocator.invoke("gitHistoryService.getCommitedData", [node.nodeUri, String(node.getPropertyValue(GitConstants.ID))], function(data:ArrayCollection):void {files = data;})
			}	
			
			public function additionalCloseHandler():void {
				// do nothing			
			}
			
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				var result:Vector.<IAction> = new Vector.<IAction>();
				result.push(new CopyIdToClipboard());
				result.push(new MergeAction(true));
				result.push(new CreateBranchAction(true));
				result.push(new ResetAction(true));
				result.push(new CheckoutAction(true));
				result.push(new CherryPickAction());
				result.push(new RevertCommitAction());
				return result;
			}
			
			private function getLabel(item:Object, column:GridColumn):String {		
				switch (column.dataField) {
					case GitConstants.ID: 
						return Node(item).getPropertyValue(GitConstants.ID);
					case GitConstants.ENTRY_SHORT_ID:
						return Node(item).getPropertyValue(GitConstants.ENTRY_SHORT_ID);
					case GitConstants.SHORT_MESSAGE:
						return Node(item).getPropertyValue(GitConstants.SHORT_MESSAGE);
					case GitConstants.AUTHOR:
						return Node(item).getPropertyValue(GitConstants.AUTHOR)+" <"+Node(item).getPropertyValue(GitConstants.AUTHOR_EMAIL);
					case GitConstants.AUTHORED_DATE:
						return formatDateTime.format(Node(item).getPropertyValue(GitConstants.AUTHORED_DATE));
					case GitConstants.COMMITTER:
						return Node(item).getPropertyValue(GitConstants.COMMITTER)+" <"+Node(item).getPropertyValue(GitConstants.COMMITTER_EMAIL);
					case GitConstants.COMMITTER_DATE:
						return  formatDateTime.format(Node(item).getPropertyValue(GitConstants.COMMITTER_DATE));
					default:
						return null;
				}
			}
			
			public function handleLink(evt:TextEvent):void {
				var n:Number = historyData.length;
				for (var i:Number = 0; i < n; i++) {
					var node:Node = Node(historyData.getItemAt(i));
					if (String(node.getPropertyValue(GitConstants.ID)) == evt.text) {
						grid.selectedItem = node;
						updateAdditionalInfo();
						grid.ensureCellIsVisible(grid.selectedIndex);
						break;
					}
				}
			}
			
			public function linkFormat(commitId:String):String {
				return Resources.getMessage("flex_client.team.git.action.history.ui.linkFormat", [commitId]);
			}
			
			private function textAreaHandler(event:GridSelectionEvent):void {
				var node:Node = Node(grid.selectedItem);
				
				var parents:String = "";
				var dataParents:ArrayCollection = ArrayCollection(node.getPropertyValue(GitConstants.PARENTS));				
				for (var i:Number = 0; i < dataParents.length; i++) {
					var parent:Node = Node(dataParents.getItemAt(i));
					parents += Resources.getMessage("flex_client.team.git.action.history.ui.parents", [
						linkFormat(parent.getPropertyValue(GitConstants.COMMIT_ID)),
						parent.getPropertyValue(GitConstants.LABEL)
					]);					
				}		
				
				var children:String = "";
				var dataChildren:ArrayCollection = ArrayCollection(node.getPropertyValue(GitConstants.CHILDREN));				
				for (i = 0; i < dataChildren.length; i++) {
					var child:Node = Node(dataChildren.getItemAt(i));
					children += Resources.getMessage("flex_client.team.git.action.history.ui.children", [
						linkFormat(child.getPropertyValue(GitConstants.COMMIT_ID)),
						child.getPropertyValue(GitConstants.LABEL)
					]);	
				}
						
				var tags:String = "";
				var tag:String = node.getPropertyValue(GitConstants.TAGS);
				if (tag != null) {
					tags = Resources.getMessage("flex_client.team.git.action.history.ui.tags", [tag]);
				}
			
				//FULL MESSAGE
				commitTextArea.htmlText = Resources.getMessage("flex_client.team.git.action.history.ui.historyTextArea",[
					node.getPropertyValue(GitConstants.ID),
					String(node.getPropertyValue(GitConstants.AUTHOR)+" &lt;"+node.getPropertyValue(GitConstants.AUTHOR_EMAIL)+"&gt; "),
					formatDateTime.format(node.getPropertyValue(GitConstants.AUTHORED_DATE)),
					String(node.getPropertyValue(GitConstants.COMMITTER)+" &lt;"+node.getPropertyValue(GitConstants.COMMITTER_EMAIL)+"&gt; "),
					formatDateTime.format(node.getPropertyValue(GitConstants.COMMITTER_DATE)),
					parents,
					children,
					branchNames.source.join(", "),
					tags,
					String(node.getPropertyValue(GitConstants.LONG_MESSAGE))
				]);
			}	
			
			private function showCommitMessageHandler(event:MouseEvent):void {	
				if (event.target.selected == true) {
					commitTextArea.includeInLayout = commitTextArea.visible = hGroup.includeInLayout = true;
				} else {
					commitTextArea.includeInLayout = commitTextArea.visible = false;
					if (filesButton.selected == false) {
						hGroup.includeInLayout = false;
					}
				}		
			}
			
			private function showFilesHandler(event:MouseEvent):void {				
				if (event.target.selected == true) {
					commitList.includeInLayout = commitList.visible = hGroup.includeInLayout = true;
				} else {
					commitList.includeInLayout = commitList.visible = false;
					if (commentsButton.selected == false) {
						hGroup.includeInLayout = false;
					}
				}		
			}
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">	
		<s:HGroup width="100%">
			<s:TextInput id="infoRepo" width="100%" height="100%"/>	
			<s:Button id="refreshBtn"
					  creationComplete="{if (!FlexUtilGlobals.getInstance().isMobile) {refreshBtn.width = refreshBtn.height = 22}}"  
					  click="refresh()" icon="{Resources.refreshIcon}"
					  toolTip="{Resources.getMessage('team.git.Refresh')}"/>
			<s:Button id="refreshFromSelectionBtn"
					  creationComplete="{if (!FlexUtilGlobals.getInstance().isMobile) {refreshFromSelectionBtn.width = refreshFromSelectionBtn.height = 22}}"
					  click="refreshFromSelection()" icon="{Resources.switchIcon}"
					  toolTip="{Resources.getMessage('team.git.RefreshFromSelection')}"/>
			<s:ToggleButton id="commentsButton"
							creationComplete="{if (!FlexUtilGlobals.getInstance().isMobile) {commentsButton.width = commentsButton.height = 22}}"
							click="showCommitMessageHandler(event)" icon="{Resources.commentsIcon}"
							selected="true"
							toolTip="{Resources.getMessage('team.git.showCommentArea')}"/>
			<s:ToggleButton id="filesButton" 
							creationComplete="{if (!FlexUtilGlobals.getInstance().isMobile) {filesButton.width = filesButton.height = 22}}"
							click="showFilesHandler(event)"
							icon="{Resources.flatLayoutIcon}" selected="true"
							toolTip="{Resources.getMessage('team.git.showFilesArea')}"/>
		</s:HGroup>
		
		<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{historyData}"
					selectionChange="updateAdditionalInfo(event)" sortableColumns="false">
			<s:columns> 
				<s:ArrayList>
					<s:GridColumn minWidth="50" dataField="drawings"
								  headerText=""
								  itemRenderer="org.flowerplatform.flex_client.team.git.history.HistoryDrawingBox"/>
					
					<s:GridColumn dataField="ShortId" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelId')}" labelFunction="getLabel"/>				
					<s:GridColumn id="messageColumn" dataField="shortMessage" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelMessage')}"
								  itemRenderer="org.flowerplatform.flex_client.team.git.history.ui.GridColumnItemRenderer"
								  labelFunction="getLabel"/>
					<s:GridColumn dataField="author" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelAuthor')}" labelFunction="getLabel"/>
					<s:GridColumn dataField="AuthoredDate" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelAuthoredDate')}"
								  labelFunction="getLabel"/>
					<s:GridColumn dataField="committer" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelCommitter')}" labelFunction="getLabel"/>
					<s:GridColumn dataField="CommitteredDate" headerText="{Resources.getMessage('flex_client.team.git.action.history.ui.labelCommittedDate')}"
								  labelFunction="getLabel"/>
					
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
		
		<s:HGroup id="hGroup" width="100%" height="100%">
			<mx:TextArea id="commitTextArea" width="100%" height="100%" editable="false"/>
			<s:List id="commitList" width="100%" height="100%" dataProvider="{files}" >
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<fx:Script>
								<![CDATA[
									import org.flowerplatform.flex_client.resources.Resources;
								]]>
							</fx:Script>
							<s:HGroup verticalAlign="middle" >	
								<s:Image source="{Resources.fileIcon}"/>
								<s:Label text="{this.data}"/>
							</s:HGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>			
			</s:List>		
		</s:HGroup>	
	</s:VGroup>
	
	<fx:Declarations>
		<mx:DateFormatter id="formatDateTime" formatString="YYYY-DD-MM HH:NN:SS" />
	</fx:Declarations>		
	
</s:VGroup>
