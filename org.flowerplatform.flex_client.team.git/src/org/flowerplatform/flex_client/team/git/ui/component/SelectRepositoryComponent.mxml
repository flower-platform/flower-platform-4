<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!--
 @author Alina Bratu
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[

			import flash.utils.getDefinitionByName;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			
			import spark.components.DropDownList;
			
			import org.flowerplatform.flex_client.core.CoreConstants;
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.core.node.remote.ServiceContext;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flex_client.team.git.GitConstants;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			
			[Bindable]
			public var showRemotesList:Boolean = true;
			
			[Bindable]
			public var remoteConfigs:IList;
			
			public var remotes:spark.components.DropDownList;
			
			public var nodeUri:String;
			
			private function creationCompleteHandler():void {
				if (!showRemotesList) {
					callLater(uriTextInput.setFocus);
				} else {
					remoteConfig.selected = true;
					changeSelection();
				}
			}
			
			private function getLabelFunction(item:Object):String {
				return Node(item).getPropertyValue(GitConstants.NAME) + ":" + Node(item).getPropertyValue(GitConstants.REMOTE_URIS);	
			}
			
			override protected function createChildren():void {
				super.createChildren();
				
				if (showRemotesList) {
					if (FlexUtilGlobals.getInstance().isMobile) {
						var mobileClass:Class = Class(getDefinitionByName("com.flextras.mobile.dropDownList.DropDownList"));
						remotes = new mobileClass();									
					} else {
						remotes = new spark.components.DropDownList();											
					}		
					
					var serviceContext:ServiceContext = new ServiceContext();
					serviceContext.add(CoreConstants.POPULATE_WITH_PROPERTIES, true);
					
					var remotesNodeUri:String = CorePlugin.getInstance().createNodeUriWithRepo(GitConstants.GIT_SCHEME, CorePlugin.getInstance().getRepository(nodeUri), GitConstants.GIT_REMOTES_TYPE);
					CorePlugin.getInstance().serviceLocator.invoke("nodeService.getChildren", [remotesNodeUri, serviceContext] ,
						function(result:ArrayCollection):void {
							remotes.dataProvider = result;
							remotes.labelFunction = getLabelFunction;
						}); 
					
					remotes.percentWidth = 100;
					remotes.requireSelection = true;
					BindingUtils.bindProperty(remotes, "visible", this, "showRemotesList");
					BindingUtils.bindProperty(remotes, "includeInLayout", this, "showRemotesList");
					addElementAt(remotes, 1);				
				}
			}
			
			public function getResult():Object {
				if (customUri.selected) {
					return uriTextInput.text;	
				}
				return remotes.selectedItem;
			}
			
			private function changeSelection():void {
				remotes.enabled = remoteConfig.selected;
				uriTextInput.enabled = customUri.selected;				
			}
						
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="group" change="changeSelection()" />
	</fx:Declarations>

	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:RadioButton id="remoteConfig" selected="{showRemotesList}" label="{Resources.getMessage('git.selectRepo.remote')}"
				   visible="{showRemotesList}" includeInLayout="{showRemotesList}" group = "{group}" />
	<s:RadioButton id="customUri" selected="{!showRemotesList}" label="{Resources.getMessage('git.selectRepo.uri')}"
				   visible="{showRemotesList}" includeInLayout="{showRemotesList}" group = "{group}"/>
	<s:TextInput id="uriTextInput" width="100%" enabled="false" />	
	
</s:Group>
