<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!--
@author Cristina Brinza
-->
<ns:Wizard xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:ns="org.flowerplatform.flexutil.popup.*"
		   xmlns:local="org.flowerplatform.flex_client.team.git.ui.component.*"
		   creationComplete="creationCompleteHandler()"
		   getIndexForStateFunction="getIndexForState">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flex_client.team.git.GitConstants;
			
			[Bindable]
			public var node:Node;
			
			protected function getIndexForState(stateName:String):int {
				if (stateName == "selectFetchPushState") {
					return 0;
				} else if (stateName == "configureFetchPushState") {
					return 1;
				}
				return -1;
			}
			
			override protected function creationCompleteHandler():void {
				super.creationCompleteHandler();
				
				/* check if CreateRemote or ConfigureRemote */
				if (node.type == GitConstants.GIT_REMOTES_TYPE) {
					next.enabled = false;
				} else {
					remoteNameTextInput.text = node.getPropertyValue(GitConstants.NAME);
					remoteNameTextInput.editable = false;
					
					next.enabled = true;
				}
			}
			
			/* state 2 functions */
			private function populateRefMappings():void {				
				if (configurePushRadioButton.selected) {
					var pushRefSpecsString:String = node.getPropertyValue(GitConstants.PUSH_REF_SPECS);
					
					if (pushRefSpecsString != null) {
						var pushRefSpecs:Array = pushRefSpecsString.split(" ");		
						pushRefSpecs.pop();
			
						configureFetchPushPage.refMappings = new ArrayCollection(pushRefSpecs);
					}
				} else {
					var fetchRefSpecsString:String = node.getPropertyValue(GitConstants.FETCH_REF_SPECS);
					
					if (fetchRefSpecsString != null) {
						var fetchRefSpecs:Array = fetchRefSpecsString.split(" ");
						fetchRefSpecs.pop();
						
						configureFetchPushPage.refMappings = new ArrayCollection(fetchRefSpecs);
					}
				}
			}
			
			override protected function nextClickHandler():void {
				this.currentState = "configureFetchPushState";
				populateRefMappings();
				
				back.enabled = false;
				super.nextClickHandler();
			}
			
			override protected function backClickHandler():void {
				this.currentState = "selectFetchPushState";
				
				super.backClickHandler();
			}
			
			override protected function finishClickHandler():void {
				/* expanded = true if Remotes node was expanded -> needed on server to know if the Remotes node needs to be refreshed */
				var expanded : Boolean;
				if (node.children != null) {
					/* node was expanded */
					expanded = true;
				} else {
					expanded = false;
				}
				CorePlugin.getInstance().serviceLocator.invoke("GitService.configureRemote", 
					[node.nodeUri, remoteNameTextInput.text, configureFetchPushPage.remoteUri, configurePushRadioButton.selected, configureFetchPushPage.refMappings, expanded]);
				
				super.finishClickHandler();
			}
			
		]]>
	</fx:Script>
	
	
	<ns:states>
		<s:State name="selectFetchPushState"/>
		<s:State name="configureFetchPushState"/>
	</ns:states>
	
	<s:Group width="100%" height="100%"
			 includeIn="selectFetchPushState">
		
		<s:layout>
			<s:VerticalLayout paddingTop="10" paddingLeft="15"/>
		</s:layout>
		
		<s:HGroup width="100%" 
				  verticalAlign="middle">
			<s:Label text="{Resources.getMessage('flex_client.team.git.ui.ConfigureRemoteView.remoteName')}"
					 fontWeight="bold"/>
			<s:TextInput id="remoteNameTextInput"
						 creationComplete="{callLater(remoteNameTextInput.setFocus)}"
						 change="{next.enabled=(remoteNameTextInput.text!='')}"
						 width="70%"/>
		</s:HGroup>
		
		<s:VGroup paddingTop="10">
			<s:RadioButton id="configurePushRadioButton"
						   label="{Resources.getMessage('flex_client.team.git.ui.ConfigureRemoteView.configurePush')}"
						   selected="true"/>
			<s:RadioButton id="configureFetchRadioButton"
						   label="{Resources.getMessage('flex_client.team.git.ui.ConfigureRemoteView.configureFetch')}"/>
		</s:VGroup>
		
	</s:Group>
	
	<local:ConfigureFetchPushComponent id="configureFetchPushPage"
									   remoteUri="{node.getPropertyValue(GitConstants.REMOTE_URIS)}"
									   includeIn="configureFetchPushState"/>
	
</ns:Wizard>