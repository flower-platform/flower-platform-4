<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!--
@author Cristina Brinza
-->
<ns:Wizard xmlns:fx="http://www.adobe.com/2006/mxml"
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:ns="org.flowerplatform.flexutil.popup.*"
		   xmlns:local="org.flowerplatform.flex_client.team.git.ui.component.*"
		   getIndexForStateFunction="getIndexForState">
	
	<fx:Script>
		<![CDATA[
			import spark.events.TextOperationEvent;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flex_client.team.git.GitConstants;
			import org.flowerplatform.flexutil.Utils;

			public var node:Node;
			
			protected function getIndexForState(stateName:String):int {
				if (stateName == "selectFetchPushState") {
					return 0;
				} else if (stateName == "configureFetchPushState") {
					return 1;
				}
				return -1;
			}
			
			override protected function creationCompleteHandler():void {
				super.creationCompleteHandler();
				
				/* check if CreateRemote or ConfigureRemote */
				if (node.type == GitConstants.GIT_REMOTES_TYPE) {
					next.enabled = false;
				} else {
					remoteNameTextInput.text = node.getPropertyValue(GitConstants.NAME);
					Utils.makePseudoDisabled(remoteNameTextInput);					
					
					configureTextInput.text = node.getPropertyValue(GitConstants.REMOTE_URIS);			
				}
			}
			
			/* state 2 functions */
			private function populateRefMappings():void {				
				configureFetchPushPage.refMappings = node.getPropertyValue(configurePushRadioButton.selected ? GitConstants.PUSH_REF_SPECS : GitConstants.FETCH_REF_SPECS);			
			}
			
			override protected function nextClickHandler():void {
				super.nextClickHandler();
				populateRefMappings();	
				
				back.enabled = false;
			}
			
			override protected function finishClickHandler():void {
				CorePlugin.getInstance().serviceLocator.invoke("GitService.configureRemote", 
					[node.nodeUri, remoteNameTextInput.text, configureTextInput.text, configurePushRadioButton.selected, configureFetchPushPage.getRefSpecs()]);
				
				super.finishClickHandler();
			}
			
			protected function textChangeHandler(event:TextOperationEvent):void {
				next.enabled = (remoteNameTextInput.text != '' && configureTextInput.text != '');
			}
			
		]]>
	</fx:Script>
	
	<s:RadioButtonGroup id="configFetchPushGroup"/>
	
	<ns:states>	
		<mx:State name="selectFetchPushState">
			<mx:SetProperty name="wizardTitle" value="{Resources.getMessage('flex_client.team.git.ui.ConfigureRemoteAction.firstPageTitle')}"/>
			
			<mx:AddChild relativeTo="{contentArea}">
				<s:Form width="100%" height="100%">			
					<s:FormItem	label="{Resources.getMessage('flex_client.team.git.ui.ConfigureRemoteView.remoteName')}">
						<s:TextInput id="remoteNameTextInput"
									 creationComplete="{callLater(remoteNameTextInput.setFocus)}"
									 change="textChangeHandler(event)" width="100%"/>
					</s:FormItem>
					
					<s:FormItem label="{Resources.getMessage('flex_client.team.git.ui.component.configureFetchPush.URI')}">
						<s:TextInput id="configureTextInput" 
									 change="textChangeHandler(event)" width="100%"/>
					</s:FormItem>
					
					<s:RadioButton id="configurePushRadioButton" group="{configFetchPushGroup}" selected="true"
								   label="{Resources.getMessage('flex_client.team.git.ui.ConfigureRemoteView.configurePush')}"  />
					<s:RadioButton id="configureFetchRadioButton" group="{configFetchPushGroup}"
								   label="{Resources.getMessage('flex_client.team.git.ui.ConfigureRemoteView.configureFetch')}"/>	
				</s:Form>
			</mx:AddChild>
		
		</mx:State>
		
		<mx:State name="configureFetchPushState">
			<mx:SetProperty name="wizardTitle" value="{configurePushRadioButton.selected ? Resources.getMessage('flex_client.team.git.ui.component.configureFetchPush.title', ['push']) : Resources.getMessage('flex_client.team.git.ui.component.configureFetchPush.title', ['fetch'])}"/>
			<mx:SetProperty name="wizardDescription" value="{configurePushRadioButton.selected ? Resources.getMessage('flex_client.team.git.ui.component.configureFetchPush.description', ['push']) :  Resources.getMessage('flex_client.team.git.ui.component.configureFetchPush.description', ['fetch'])}"/>
		
			<mx:AddChild relativeTo="{contentArea}">
				<local:ConfigureFetchPushComponent id="configureFetchPushPage"
												   height="100%"
												   width="100%"/>
			</mx:AddChild>
		</mx:State>
			
		
	</ns:states>
	
</ns:Wizard>