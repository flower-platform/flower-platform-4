<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!--
 @author Alina Bratu
-->
<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml"
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:popup="org.flowerplatform.flexutil.popup.*"
		 xmlns:component="org.flowerplatform.flex_client.team.git.ui.component.*"
		 getIndexForStateFunction="getIndexForState">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.primitives.BitmapImage;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flex_client.team.git.remote.GitRef;
			import org.flowerplatform.flexutil.spinner.ModalSpinner;
			
			public var nodeUri:String;
			
			[Bindable]
			private var selectedBranches:ArrayCollection = new ArrayCollection(); /* of GitRef */
			
			private var allBranches:ArrayCollection = new ArrayCollection();
		
			private var repoUri:String;
												
			public function getIndexForState(stateName:String):int {
				if (stateName == "selectRepoPage") {
					return 0;
				}
				return 1;
			}
			
			override protected function creationCompleteHandler():void {
				super.creationCompleteHandler();		
				
				//it doesn't work by simply apply focus
				callLater(repositorySelectionPage.uriTextInput.setFocus);
			}	
			
			override protected function nextClickHandler():void {
				repoUri = repositorySelectionPage.getResult() as String;
				CorePlugin.getInstance().serviceLocator.invoke("GitService.validateRepoURL", [repoUri], validateRepoURLResultHandler);
			}
			
			protected function validateRepoURLResultHandler(result:int):void {
				if (result == 0) { // ok					
					CorePlugin.getInstance().serviceLocator.invoke("GitService.getRemoteBranches", [repoUri], getBranchesResultHandler);
				}
			}
			
			protected function getBranchesResultHandler(data:ArrayCollection):void {				
				if (data != null) {
					allBranches = data;			
				} else {
					allBranches.removeAll();								
				}
				allBranches.refresh();
				applyFilterHandler();
				
				super.nextClickHandler();
			}
			
			override protected function finishClickHandler():void {			
				var branches:ArrayCollection = new ArrayCollection();				
				for each (var branch:GitRef in selectedBranches) {
					if (branch.getSelected()) {
						branches.addItem(branch.fullName);
					}
				}				
				CorePlugin.getInstance().serviceLocator.invoke("GitService.cloneRepository", [nodeUri, repoUri, branches, allBranches.length == 0 || branches.length == allBranches.length]);
				
				super.finishClickHandler();
			}
									
			protected function applyFilterHandler():void {
				selectedBranches.removeAll();
				for each (var branch:GitRef in allBranches) {
					if (branchesFilter == null || branchesFilter.text == Resources.getMessage('git.filter')) {
						selectedBranches.addItem(branch);
					} else if (branch.fullName.toLowerCase().match(branchesFilter.text.toLowerCase())) {
						selectedBranches.addItem(branch);
					}
				}
				selectedBranches.refresh();
			}
			
		]]>
	</fx:Script>
	
	<popup:states>		
		<mx:State name="selectRepoPage">
			<mx:SetProperty name="wizardTitle" value="{Resources.getMessage('git.selectRepo.title')}"/>					
			<mx:SetProperty name="wizardDescription" value="{Resources.getMessage('git.selectRepo.description')}"/>
			
			<mx:AddChild relativeTo="{contentArea}">
				<component:SelectRepositoryComponent id="repositorySelectionPage" width="100%" height="100%" showRemotesList="false" nodeUri="{nodeUri}"/>	
			</mx:AddChild>
		
		</mx:State>
			
		<mx:State name="selectBranchesPage">
			<mx:SetProperty name="wizardTitle" value="{Resources.getMessage('git.cloneRepo.branches.title')}"/>					
			<mx:SetProperty name="wizardDescription" value="{Resources.getMessage('git.cloneRepo.branches.description')}"/>
			
			<mx:AddChild relativeTo="{contentArea}">
				<s:VGroup id="branchesSelectionPage" width="100%" height="100%" >
					<s:TextInput id="branchesFilter" change="applyFilterHandler()" text="{Resources.getMessage('git.filter')}" width="100%" />
					<s:List id="branchesList" width="100%" height="100%" dataProvider="{selectedBranches}" >
						<s:itemRenderer> 
							
							<fx:Component> 
								<s:ItemRenderer>
									<fx:Script>
										<![CDATA[																			
											import org.flowerplatform.flex_client.resources.Resources;
											import org.flowerplatform.flexutil.FlexUtilGlobals;
											
										]]>
									</fx:Script>
									<s:layout>
										<s:HorizontalLayout paddingLeft="5" gap="5" paddingRight="5" verticalAlign="middle"/>
									</s:layout>
									
									<s:CheckBox selected="{data.getSelected()}" click="{data.setSelected(!data.getSelected())}"/>
									<s:BitmapImage source="{FlexUtilGlobals.getInstance().createAbsoluteUrl(Resources.getResourceUrl('images/team.git/branch_obj.gif'))}"/>
									<s:Label text="{data.name}" />
									
								</s:ItemRenderer>
							</fx:Component> 
						</s:itemRenderer>
					</s:List>
				</s:VGroup>	
			</mx:AddChild>
		</mx:State>
	</popup:states>
	
</popup:Wizard>
