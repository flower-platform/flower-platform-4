<?xml version="1.0" encoding="utf-8"?>
<popup:Wizard xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:popup="org.flowerplatform.flexutil.popup.*"
		 xmlns:component="org.flowerplatform.flex_client.team.git.ui.component.*"
		 getIndexForStateFunction="getIndexForState"
		 creationComplete="creationCompleteHandler()"
		 wizardTitle.selectBranchesPage="{Resources.getMessage('git.cloneRepo.branches.title')}"
		 wizardTitle.selectRepoPage="{Resources.getMessage('git.selectRepo.title')}"
		 wizardDescription.selectBranchesPage="{Resources.getMessage('git.cloneRepo.branches.description')}"
		 wizardDescription.selectRepoPage="{Resources.getMessage('git.selectRepo.description')}"
		 contentArea.selectBranchesPage="{branchesSelectionPage}"
		 contentArea.selectRepoPage="{repositorySelectionPage}"
		 wizardImage="{new BitmapImage().source(Resources.cloneRepoIcon)}">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.Container;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.primitives.BitmapImage;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.spinner.ModalSpinner;
			
			[Bindable]
			public var selectedBranches:ArrayCollection;
			var allBranches:ArrayCollection;
			var branches:ArrayCollection;
			
			public var nodeUri:String;
			var repoUri:String;
												
			public function getIndexForState(stateName:String):int {
				if (stateName == "selectRepoPage") {
					return 0;
				}
				return 1;
			}
			
			override protected function nextClickHandler():void {
				repoUri = src.getURI();
				CorePlugin.getInstance().serviceLocator
					.invoke("GitService.validateRepoURL",[repoUri],validateRepoURLResultHandler);
			}
			
			protected function validateRepoURLResultHandler(i:int):void {
				switch (i) {
					case -1:// error
						throwError(Resources.getMessage('git.selectRepo.badUri'));
						break;
					case 0: // uri ok
						CorePlugin.getInstance().serviceLocator.invoke("GitService.getRemoteBranches",[repoUri],getBranchesResultHandler);
						break;
					case 1: // repo already here
						throwError(Resources.getMessage('git.selectRepo.existentRepo'));
						break;
				}
			}
			private function throwError(s:String):void {
				FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
					.setTitle(Resources.getMessage('error'))
					.setText(s)
					.setWidth(200)
					.setHeight(200)
					.showMessageBox();
			}
			
			protected function getBranchesResultHandler(all:ArrayCollection):void {
				if (all != null) {
					allBranches = new ArrayCollection();
					selectedBranches = new ArrayCollection();
					for each (var s:String in all) {
						var br:Object = new Object();
						br.name = s;
						br.isSelected = false;
						selectedBranches.addItem(br);
						allBranches.addItem(br);
					}
				}
				else {
					allBranches = new ArrayCollection();
					selectedBranches = new ArrayCollection();
				}
				super.nextClickHandler();
			}
			
			override protected function finishClickHandler():void {
				var cloneAll:Boolean = true;
				branches = new ArrayCollection();
				updateSelectedBranches();
				for each (var branch:Object in allBranches) {
					if (branch.isSelected) {
						branches.addItem(branch.name);
					}
				}
				if (branches.length != allBranches.length) {
					cloneAll = false;
				}
				ModalSpinner.addGlobalModalSpinner(Resources.getMessage("git.spinner.cloneRepo"),new ModalSpinner());
				CorePlugin.getInstance().serviceLocator.invoke("GitService.cloneRepo",[nodeUri,repoUri,branches,cloneAll],removeSpinner,doneFaultHandler);
				super.finishClickHandler();
			}
			
			private function doneFaultHandler(event:FaultEvent):void {
				throwError(event.fault.message);
				removeSpinner(event);
			}
			
			private function removeSpinner(event:Event):void {
				ModalSpinner.removeGlobalModalSpinner();
			}
			
			private function updateSelectedBranches():void {
				for each (var branch:Object in selectedBranches) {
					allBranches.getItemAt(allBranches.getItemIndex(branch)).isSelected = branch.isSelected;
				}
			}
						
			private function filterBranches(event:KeyboardEvent):void {
				updateSelectedBranches();
				selectedBranches.removeAll();
				for each (var branch:Object in allBranches) {
					if (branch.name.toLowerCase().match(branchesFilter.text.toLowerCase())) {
						selectedBranches.addItem(branch);
					}
					else {
						if (branchesFilter.text.toLowerCase() == Resources.getMessage('git.filter')) {
							selectedBranches.addItem(branch);
						}
					}
				}
				
			}
			
						
		]]>
	</fx:Script>
	
	<popup:states>
		<mx:State name="selectRepoPage" >
			
		</mx:State>
		<mx:State name="selectBranchesPage">
		</mx:State>
	</popup:states>
	
	<mx:VBox id="repositorySelectionPage" width="100%">
		<component:SelectRepositoryComponent  id="src" width="100%" height="100%" includeIn="selectRepoPage" showRemotesList="false"/>		
	</mx:VBox>
	
	
	<mx:VBox id="branchesSelectionPage" width="100%" height="100%" paddingLeft="10" paddingRight="10">
		<s:TextInput id="branchesFilter" keyUp="filterBranches(event)" text="{Resources.getMessage('git.filter')}" includeIn="selectBranchesPage" width="100%" />
		<s:List id="branchesList" includeIn="selectBranchesPage" width="100%" height="100%" dataProvider="{selectedBranches}">
			<s:itemRenderer> 
				
				<fx:Component> 
					<s:ItemRenderer creationComplete="creationCompleteHandler(event)">
						<fx:Script>
							<![CDATA[																			
								import mx.collections.ArrayCollection;
								import mx.events.FlexEvent;
								
								import org.flowerplatform.flex_client.resources.Resources;
								import org.flowerplatform.flexutil.FlexUtilGlobals;
								
								public var selectedB:ArrayCollection = new ArrayCollection();
								
								protected function creationCompleteHandler(event:FlexEvent):void {
									
//									var img:BitmapImage = new BitmapImage();
//									img.source = FlexUtilGlobals.getInstance().createAbsoluteUrl(Resources.getResourceUrl('images/team.git/branch_obj.gif'));
//									chkBranch.iconDisplay = img;
								}
							]]>
						</fx:Script>
						<s:layout>
							<s:HorizontalLayout paddingLeft="2" gap="2" paddingRight="2" verticalAlign="middle">
								
							</s:HorizontalLayout>
						</s:layout>
						<s:CheckBox selected="{data.isSelected}" click="{data.isSelected = (!data.isSelected)}"/>
						<s:BitmapImage source="{FlexUtilGlobals.getInstance().createAbsoluteUrl(Resources.getResourceUrl('images/team.git/branch_obj.gif'))}">
							
						</s:BitmapImage>
						<s:Label text="{data.name}" verticalAlign="middle"/>
						
					</s:ItemRenderer>
				</fx:Component> 
			</s:itemRenderer>
		</s:List>
	</mx:VBox>
		
</popup:Wizard>
