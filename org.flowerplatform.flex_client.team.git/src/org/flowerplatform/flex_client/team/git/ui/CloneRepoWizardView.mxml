<?xml version="1.0" encoding="utf-8"?>
<popup:Wizard xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:popup="org.flowerplatform.flexutil.popup.*"
		 xmlns:component="org.flowerplatform.flex_client.team.git.ui.component.*"
		 getIndexForStateFunction="getIndexForState"
		 creationComplete="creationCompleteHandler()"
		 wizardTitle.selectBranchesPage="{Resources.getMessage('git.cloneRepo.branches.title')}"
		 wizardTitle.selectRepoPage="{Resources.getMessage('git.selectRepo.title')}"
		 wizardDescription.selectBranchesPage="{Resources.getMessage('git.cloneRepo.branches.description')}"
		 wizardDescription.selectRepoPage="{Resources.getMessage('git.selectRepo.description')}"
		 contentArea.selectBranchesPage="{branchesSelectionPage}"
		 contentArea.selectRepoPage="{repositorySelectionPage}">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.events.TextOperationEvent;
			
			import org.flowerplatform.flex_client.resources.Resources;
			
			var selectedBranches:ArrayCollection;
			var allBranches:ArrayCollection;
			var branches:ArrayCollection = new ArrayCollection();
			
			override protected function creationCompleteHandler():void {
				src.remoteRepoGroup.visible = false;
				src.remoteRepoGroup.includeInLayout = false;
				super.creationCompleteHandler();
			}
									
			 public function getIndexForState(stateName:String):int {
				 if (stateName == "selectRepoPage") {
					return 0;
				}
				return 1;
			}
			
			override protected function nextClickHandler():void {
				var uri:String = src.getURI();
				// TODO AB: validate URI
				selectedBranches = new ArrayCollection();
				allBranches = new ArrayCollection();
				// TODO AB: fetch branches from repo
				super.nextClickHandler();
			}
			
			override protected function finishClickHandler():void {
				if (selectedBranches.length >= 0) {
					//TODO AB: send array of branches to clone to a clonecommand
				}
				super.finishClickHandler();
			}
			
			private function filterBranches(event:TextOperationEvent):void {
				branches.removeAll();
				for each (var branch:Ref in allBranches) {
					if (branchesFilter.text.match(branch.name)) {
						branches.addItem(branch);
					}
					else {
						if (branchesFilter.text.match(Resources.getMessage('git.filter'))) {
							branches.addItem(branch);
						}
					}
				}
				
			}
						
		]]>
	</fx:Script>
	
	<popup:states>
		<mx:State name="selectRepoPage" >
			
		</mx:State>
		<mx:State name="selectBranchesPage">
		</mx:State>
	</popup:states>
	
	<mx:VBox id="repositorySelectionPage" width="100%">
		<component:SelectRepositoryComponent  id="src" width="100%" height="100%" includeIn="selectRepoPage"/>		
	</mx:VBox>
	
	
	<mx:VBox id="branchesSelectionPage" width="100%" paddingLeft="10">
		<s:TextInput id="branchesFilter" text="{Resources.getMessage('git.filter')}" includeIn="selectBranchesPage" change="filterBranches(event)"/>
		<s:List id="branchesList" includeIn="selectBranchesPage" dataProvider="{branches}">
			
		</s:List>
	</mx:VBox>
		
</popup:Wizard>
