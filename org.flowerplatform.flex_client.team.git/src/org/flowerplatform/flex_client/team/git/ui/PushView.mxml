<?xml version="1.0" encoding="utf-8"?>
<!-- 
Andreea Tita
-->
<ns:Wizard xmlns:fx="http://ns.adobe.com/mxml/2009" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ns="org.flowerplatform.flexutil.popup.*" xmlns:src="org.flowerplatform.flex_client.team.git.ui.component.*"
			  getIndexForStateFunction="getIndexForState" >
			  
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flex_client.team.git.GitConstants;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			
			[Bindable]
			public var node:Node;
			
			protected function getIndexForState(stateName:String):int {
				if (stateName == "pushBranchToRemote") {
					return 0;
				} else if (stateName == "pushConfirmation") {
					return 1;
				}
				return -1;
			}		

			override protected function nextClickHandler():void {
				if (currentState == "pushBranchToRemote") {
					if (selectRepositoryComponent.getResult() is String && String (selectRepositoryComponent.getResult()).length == 0) { 
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
							.setTitle(Resources.getMessage('error'))
							.setText(Resources.getMessage('flex_client.team.git.ui.Push.errorMessage'))
							.setWidth(200)
							.setHeight(150)
							.showMessageBox();
						return;
					}
				}
				
				this.currentState = "pushConfirmation";
				back.enabled = false; 
				super.nextClickHandler();
			
				if (selectRepositoryComponent.getResult() as Node) {
					configureFetchPushComponent.refMappings = Node(selectRepositoryComponent.remotes.selectedItem).getPropertyValue(GitConstants.PUSH_REF_SPECS);
				}
			}
			
			protected override function finishClickHandler():void {
				var pushNodeUri:String;
				
				if (selectRepositoryComponent.getResult() as Node) {
					pushNodeUri = String(ArrayCollection(Node(selectRepositoryComponent.remotes.selectedItem).getPropertyValue(GitConstants.REMOTE_URIS)));
				} else if (selectRepositoryComponent.getResult() as String) {
					pushNodeUri = selectRepositoryComponent.getResult() as String;
				}
				
				if (configureFetchPushComponent.getRefSpecs().length == 0) {
					FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setText(Resources.getMessage('flex_client.team.git.FetchPush.error'))
						.setTitle(Resources.getMessage('error'))
						.setWidth(300)
						.setHeight(200)
						.showMessageBox();
					return;
				}
				
				// invoke push from server - nodeUri, uri of selected node, pushRefMappings
				CorePlugin.getInstance().serviceLocator.invoke("GitService.push",
					[node.nodeUri,
					 pushNodeUri,
					 ArrayCollection (configureFetchPushComponent.getRefSpecs())], 
					function(result:String):void {
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setText(result)
						.setTitle(Resources.getMessage('flex_client.team.git.ui.Push.pushResult'))
						.setWidth(300)
						.setHeight(200)
						.showMessageBox();
					});
				super.finishClickHandler();
			}
			
			
			
		]]>
	</fx:Script>
	
	<ns:states>
		<s:State  name="pushBranchToRemote" />
		<s:State  name="pushConfirmation" />
	</ns:states>
	
	<src:SelectRepositoryComponent id="selectRepositoryComponent" width="100%" height="100%"
								   includeIn="pushBranchToRemote" nodeUri="{node.nodeUri}" />
	
	<src:ConfigureFetchPushComponent id="configureFetchPushComponent" width="100%" height="100%"
									 includeIn="pushConfirmation" />		
	
</ns:Wizard>
