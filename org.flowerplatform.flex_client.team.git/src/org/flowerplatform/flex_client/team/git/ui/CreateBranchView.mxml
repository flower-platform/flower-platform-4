<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

license-end
-->

<!--- 
@author Cristina Brinza 
-->

<ns:BasicViewContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ns="org.flowerplatform.flexutil.view_content_host.*"
		 creationComplete="creationCompleteHandler(event)">
		
	<fx:Script>
		<![CDATA[			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.team.git.GitConstants;
			import org.flowerplatform.flex_client.team.git.remote.GitBranch;
						
			[Bindable]
			public var branches:ArrayCollection;
			
			[Bindable]
			public var nodePath:String;
						
			private const CREATE_BRANCH_ERROR:String = "Create Branch Error!";
			
			override protected function creationCompleteHandler(event:FlexEvent):void {
				super.creationCompleteHandler(event);
				
				mergeUpstreamRadioButton.selected = true;
				mergeUpstreamRadioButton.enabled = false;
				
				rebaseCommitsRadioButton.selected = false;
				rebaseCommitsRadioButton.enabled = false;
				
				checkoutBranchCheckBox.selected = true;

				CorePlugin.getInstance().serviceLocator.invoke("GitService.getBranches", [nodePath], getBranchesHandler); 
			}
			
			protected function getBranchesHandler(serverBranches:ArrayCollection):void {
				/* populate branches */
				branches = serverBranches;
				selectBranch.dataProvider = branches;
			}
			
			protected function configureUpstreamClickHandler(event:MouseEvent):void {
				/* enable radio buttons */
				mergeUpstreamRadioButton.enabled = !mergeUpstreamRadioButton.enabled;
				rebaseCommitsRadioButton.enabled = !rebaseCommitsRadioButton.enabled;
			}
					
			override protected function okHandler(event:Event = null):void {	
				var track:Boolean;
				var setUpstream:Boolean;
				var checkoutBranch:Boolean;
				var configureUpstream:Boolean;
				
				/* happens on ok */
				if (branchNameTextInput.text == "") {
					Alert.show("Please choose a name for the new branch", CREATE_BRANCH_ERROR);
				} else {
					/*						
						- see which options are selected to know how to call createBranch on server 
						- track = !noTrack
						- nameValidation done on server
					*/
					
					/* if the node is a tag, don't configure upstream in createBranch */
					configureUpstream = configureUpstreamGroup.visible;
					/* Merge upstream commits into local branch */
					track = configureUpstreamCheckBox.selected && mergeUpstreamRadioButton.selected;
					/* Rebase commits of local branch onto upstream */
					setUpstream = configureUpstreamCheckBox.selected && rebaseCommitsRadioButton.selected;
					/* Checkout new Branch */
					checkoutBranch = checkoutBranchCheckBox.selected;
										
					CorePlugin.getInstance().serviceLocator.invoke("GitService.createBranch", [nodePath, branchNameTextInput.text, selectBranch.selectedItem.branchName, configureUpstream, track, setUpstream, checkoutBranch]);
				}
			}
			
			protected function selectBranchChangeHandler(event:IndexChangeEvent):void {				
				var selectedItem:Object = branches.getItemAt(selectBranch.selectedIndex);
				
				if (selectedItem.branchType == GitConstants.GIT_TAG) {
					configureUpstreamGroup.visible = false;
				} else if (selectedItem.branchType == GitConstants.GIT_LOCAL_BRANCH) {
					configureUpstreamGroup.visible = true;
					
					configureUpstreamCheckBox.selected = false;
					
					rebaseCommitsRadioButton.enabled = false;
					mergeUpstreamRadioButton.enabled = false;
				} else if (selectedItem.branchType == GitConstants.GIT_REMOTE_BRANCH) {
					configureUpstreamGroup.visible = true;
					
					configureUpstreamCheckBox.selected = true;
					
					rebaseCommitsRadioButton.enabled = true;
					mergeUpstreamRadioButton.enabled = true;
				}
			}
			
		]]>
	</fx:Script>
			
	<s:Form>
		<s:FormItem label="Source:">
			<s:DropDownList id="selectBranch" 
							requireSelection="true"
							dataProvider="{branches}"
							change="selectBranchChangeHandler(event)"
							labelField="branchName"
							baseline="15"
							width="150"/>
		</s:FormItem>
		
		<s:FormItem label="Branch Name:">
			<s:TextInput id="branchNameTextInput"
						 baseline="15"
						 width="{selectBranch.width}"/>
		</s:FormItem>
	</s:Form>
	
	<s:VGroup id="configureUpstreamGroup">
		<s:CheckBox id="configureUpstreamCheckBox"
					label="Configure upstream for push and pull" 
					click="configureUpstreamClickHandler(event)"/>
		<s:Label text="When doing a pull"/>
		<s:RadioButton id="mergeUpstreamRadioButton"
					   label="Merge upstream commits into local branch"
					   click="rebaseCommitsRadioButton.selected=false;"/>
		<s:RadioButton id="rebaseCommitsRadioButton"
					   label="Rebase commits of local branch onto upstream"
					   click="mergeUpstreamRadioButton.selected=false;"/>
	</s:VGroup>
	
	<s:CheckBox id="checkoutBranchCheckBox"
				label="Checkout new Branch"/>

</ns:BasicViewContent>
