<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!--
@author Cristina Brinza 
-->
<ns:BasicViewContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ns="org.flowerplatform.flexutil.view_content_host.*">
		
	<fx:Script>
		<![CDATA[			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.layouts.VerticalLayout;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flex_client.team.git.GitConstants;
						
			[Bindable]
			public var branches:ArrayCollection;
			
			public var node:Node;
			
			override protected function creationCompleteHandler(event:FlexEvent):void {
				super.creationCompleteHandler(event);				
				
				VerticalLayout(layout).gap = 15;
				CorePlugin.getInstance().serviceLocator.invoke("GitService.getBranches", [node.nodeUri], getBranchesHandler); 
			}
			
			protected function getBranchesHandler(branches:ArrayCollection):void {
				/* populate branches */
				this.branches = branches;
				
				/* find the selected index */
				for each (var branch:Object in branches) {
					if (branch.name == node.getPropertyValue(GitConstants.FULL_NAME)) {
						selectBranch.selectedItem = branch;
						checkState(branch);
						break;
					}
				}
				
				selectBranch.dataProvider = branches;
			}
			
			protected function configureUpstreamClickHandler(event:MouseEvent):void {
				/* enable radio buttons */
				mergeUpstreamRadioButton.enabled = !mergeUpstreamRadioButton.enabled;
				rebaseCommitsRadioButton.enabled = !rebaseCommitsRadioButton.enabled;
			}
					
			override protected function okHandler(event:Event = null):void {									
				/* send to server the parent */
				var parentUri:String;
				if (node.parent.type == GitConstants.GIT_LOCAL_BRANCHES_TYPE) {
					parentUri = node.parent.nodeUri;
				} else {
					for each (var child:Node in node.parent.parent.children) {
						if (child.type == GitConstants.GIT_LOCAL_BRANCHES_TYPE) {
							parentUri = child.nodeUri;
						}
					}
				}
				CorePlugin.getInstance().serviceLocator.invoke("GitService.createBranch", 
					[parentUri, 
					branchNameTextInput.text, 
					selectBranch.selectedItem.name, 
					configureUpstreamGroup.visible, // if the node is a tag, don't configure upstream in createBranch
					configureUpstreamCheckBox.selected && mergeUpstreamRadioButton.selected, // Merge upstream commits into local branch
					configureUpstreamCheckBox.selected && rebaseCommitsRadioButton.selected, // Rebase commits of local branch onto upstream
					checkoutBranchCheckBox.selected]); // Checkout new Branch
				
				cancelHandler(event);
			}
			
			protected function selectBranchChangeHandler(event:IndexChangeEvent):void {				
				var selectedItem:Object = branches.getItemAt(selectBranch.selectedIndex);
			
				checkState(selectedItem);
			}
			
			/* determine which components will be visible / enabled / selected and which not */
			protected function checkState(selectedItem:Object):void {				
				configureUpstreamGroup.visible = configureUpstreamGroup.includeInLayout = (selectedItem.type != GitConstants.GIT_TAG_TYPE);
				
				if (selectedItem.type != GitConstants.GIT_TAG_TYPE) {					
					configureUpstreamCheckBox.selected = rebaseCommitsRadioButton.enabled = mergeUpstreamRadioButton.enabled = (selectedItem.type == GitConstants.GIT_REMOTE_BRANCH_TYPE);					
				}				
			}
			
		]]>
	</fx:Script>
			
	<s:Form width="100%">
		<s:FormItem label="{Resources.getMessage('flex_client.team.git.ui.source')}"
					width="100%">
			<s:DropDownList id="selectBranch" 
							requireSelection="true"
							dataProvider="{branches}"
							change="selectBranchChangeHandler(event)"
							labelField="name"
							width="100%"/>
		</s:FormItem>
		
		<s:FormItem label="{Resources.getMessage('flex_client.team.git.ui.branchName')}"
					width="100%">
			<s:TextInput id="branchNameTextInput"
						 baseline="15"
						 width="100%"/>
		</s:FormItem>
	</s:Form>
	
	<s:VGroup id="configureUpstreamGroup">
		<s:CheckBox id="configureUpstreamCheckBox"
					label="{Resources.getMessage('flex_client.team.git.ui.configureUpstreamForPushAndPull')}" 
					click="configureUpstreamClickHandler(event)"/>
		<s:VGroup paddingLeft="20" paddingTop="10">
			<s:Label text="{Resources.getMessage('flex_client.team.git.ui.whenDoingAPull')}"/>
			<s:RadioButton id="mergeUpstreamRadioButton"
						   label="{Resources.getMessage('flex_client.team.git.ui.mergeUpstreamCommitsIntoLocalBranch')}"
						   click="rebaseCommitsRadioButton.selected=false;"
						   selected="true" enabled="false"/>
			<s:RadioButton id="rebaseCommitsRadioButton"
						   label="{Resources.getMessage('flex_client.team.git.ui.rebaseCommitsOfLocalBranchOntoUpstream')}"
						   click="mergeUpstreamRadioButton.selected=false;"
						   selected="false" enabled="false"/>
		</s:VGroup>
	</s:VGroup>

	<s:CheckBox id="checkoutBranchCheckBox"
				label="{Resources.getMessage('flex_client.team.git.ui.checkoutNewBranch')}"
				selected="true"/>

</ns:BasicViewContent>