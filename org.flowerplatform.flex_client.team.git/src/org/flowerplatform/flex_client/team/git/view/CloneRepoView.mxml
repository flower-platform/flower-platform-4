<?xml version="1.0" encoding="utf-8"?>
<host:BasicViewContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"  
					   xmlns:host="org.flowerplatform.flexutil.view_content_host.*">
	
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.flowerplatform.flex_client.core.editor.EditorFrontend;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.core.node.NodeRegistry;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.layout.IWorkbench;
			
			public var uploadLocationNode:Node;
			
			protected var fileReference:FileReference;
			
			override protected function creationCompleteHandler(event:FlexEvent):void {	
				
				fileReference = new FileReference();
				fileReference.addEventListener(Event.SELECT, onSelectHandler);
				fileReference.addEventListener(Event.COMPLETE, onCompleteHandler);		
				fileReference.addEventListener(IOErrorEvent.IO_ERROR, onIoErrorHandler);
			}
			
			protected function browse_clickHandler(event:MouseEvent):void {
//				fileReference.browse();
				var selectRepo:SelectRepository = new SelectRepository();
				PopUpManager.addPopUp(selectRepo, this, true);
				PopUpManager.centerPopUp(selectRepo);
			}
			
			
			protected function onSelectHandler(event:Event):void {
				locationTxt.text = fileReference.name;	
				okButton.enabled = true;
			}
			
			protected function onIoErrorHandler(event:IOErrorEvent):void {				
				FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
					.setTitle(Resources.getMessage("error"))
					.setText(event.text)
					.showMessageBox();
				cancelHandler();
			}
			
			
			
			protected function onCompleteHandler(event:Event):void {
				// refresh node data
				var workbench:IWorkbench = FlexUtilGlobals.getInstance().workbench;			
				var activeComponent:UIComponent = workbench.getEditorFromViewComponent(workbench.getActiveView());
				
				if (activeComponent is EditorFrontend) {
					var nodeRegistry:NodeRegistry = EditorFrontend(activeComponent).nodeRegistry;
					nodeRegistry.refresh(uploadLocationNode);					
				}
				
				cancelHandler();
			}
			
			override public function additionalCloseHandler():void {
				fileReference.cancel();
			}
			
			var pageNumber:uint = 1;
			public function next_clickHandler(event:MouseEvent):void {
				switch (pageNumber) {
					case 1:
						var uriValid:Boolean = true;
						// TODO AB: validate URI
						if (uriValid) {
							description.text = Resources.getMessage('git.cloneRepo.branches.description');
							branchesList.visible = true;
							branchesList.includeInLayout = true;
							pageNumber = 2;
							doneBtn.label = Resources.getMessage('git.cloneRepo.finish');
							
							// TODO AB: get branches from repo
							trace("get branches");
						}
						break;
					case 2:
						// TODO AB: clone selected branches from repo
						trace("clone repo");
					
				}
				
			}
			
			public function cancel_clickHandler(event:MouseEvent):void {
				// TODO AB: close wizard
				trace("close window");
			}
			
		]]>
	</fx:Script>
	
	<s:Label id="description" text="{Resources.getMessage('git.cloneRepo.description')}"  />
	<s:HGroup width="100%">	
		<s:Label>URI: </s:Label>
		<s:TextInput id="locationTxt" width="100%" editable="false" />
		<s:Button id="browseLocalBtn" label="{Resources.getMessage('git.cloneRepo.select')}" click="browse_clickHandler(event)" />					
	</s:HGroup>	
	<s:List id="branchesList" visible="false" includeInLayout="false">
		
	</s:List>
	<s:Button id="doneBtn" label="{Resources.getMessage('git.cloneRepo.next')}" click="next_clickHandler(event)"/>
	<s:Button id="cancelBtn" label="{Resources.getMessage('git.cloneRepo.cancel')}" click="cancel_clickHandler(event)"/>
</host:BasicViewContent>
