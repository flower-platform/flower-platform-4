<?xml version="1.0" encoding="utf-8"?>
<s:List xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		width="100%" 
		height="100%" 
		creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.apache.flex.collections.ArrayList;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.team.git.action.AddToGitIndex;
			import org.flowerplatform.flex_client.team.git.action.RemoveFromGitIndex;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.context_menu.FillContextMenuEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			public var gitStagingView:GitStagingView;
			public var showStageFiles:Boolean = true;
			public var host:IViewHost
			protected var icon:Class;
			public var selectedNodes:Vector.<Object>;
					
			public function getSelection():IList {
				var result:Array = new Array();
				
				if (this.selectedIndices) {
					var count:int = this.selectedIndices.length;
					
					for (var i:int = 0; i < count; i++)
						result.push(this.dataProvider.getItemAt(this.selectedIndices[i]));  
				}
				return new ArrayList(result);
			}
			public function getActions(selection:IList):Vector.<IAction> {
				var result:Vector.<IAction> = new Vector.<IAction>();
				
				if (showStageFiles) {
					result.push(new AddToGitIndex(gitStagingView, selectedNodes));
				} else {
					result.push(new RemoveFromGitIndex(gitStagingView, selectedNodes));
				}
				return result;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				addEventListener(FillContextMenuEvent.FILL_CONTEXT_MENU, fillContextMenuHandler);
			}
			
			protected function fillContextMenuHandler(event:FillContextMenuEvent):void {
				var selection:IList = getSelection();
				event.allActions = getActions(selection);
				event.selection = selection;
			}
			
		]]>
	</fx:Script>
	<s:itemRenderer>
		<fx:Component>
			<s:IconItemRenderer width="100%"
								iconFunction="{getIcon}"
								verticalAlign="middle"
								paddingLeft="5"
								creationComplete="item_creationCompleteHandler(event)">
				<fx:Script>
					<![CDATA[
						import mx.events.FlexEvent;
						
						import org.flowerplatform.flex_client.core.CoreConstants;
						import org.flowerplatform.flex_client.core.editor.remote.Node;
						import org.flowerplatform.flexutil.FlexUtilGlobals;

						private function getIcon(data:Node):Object {
							return data.getPropertyValue(CoreConstants.ICONS);
						}
						
						protected function item_creationCompleteHandler(event:FlexEvent):void
						{
							if (!FlexUtilGlobals.getInstance().isMobile) {
								// only for web
								minHeight = 22;	
							}
						}	
					]]>
				</fx:Script>
			</s:IconItemRenderer>
		</fx:Component>
	</s:itemRenderer> 
</s:List>
