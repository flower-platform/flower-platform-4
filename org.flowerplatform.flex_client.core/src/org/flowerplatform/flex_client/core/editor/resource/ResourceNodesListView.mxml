<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!--
 @author Cristina Constantinescu
 @author Mariana Gheorghe
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent" 
		 currentState="{resourceNodes.length == 1 ? 'singleResourceNode' : 'multipleResourceNodes'}" >
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexutil.FlexUtilAssets;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.view_content_host.IViewContent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
	
			public var nodeRegistries:Array;		
			
			[Bindable]
			public var resourceNodes:IList;
			
			public var handler:Function;
			
			public var serverMethodToInvokeForSelection:String;
			
			private var _viewHost:IViewHost;
			
			public var title:String;
			
			[Bindable]
			public var labelForSingleResourceNode:String;
			
			[Bindable]
			public var labelForMultipleResourceNodes:String;
			
			public var iconForSingleResourceNode:Object;
			public var iconForMultipleResourceNodes:Object;
						
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				_viewHost = viewHost;
				_viewHost.setLabel(title);
				_viewHost.setIcon(currentState == "singleResourceNode" ? iconForSingleResourceNode : iconForMultipleResourceNodes);							
			}		
						
			protected function setAllSelected(value:Boolean):void {
				for (var i:int = 0; i < resourceNodes.length; i++) {
					var resourceNodeData:ResourceNode = ResourceNode(resourceNodes.getItemAt(i));
					resourceNodeData.selected = value;
				}
			}
			
			protected function yesButton_clickHandler(event:MouseEvent):void {
				var invokedServerMethod:Boolean = false;
				for (var i:int = 0; i < resourceNodes.length; i++) {
					var resourceNodeData:ResourceNode = ResourceNode(resourceNodes.getItemAt(i));
					if (resourceNodeData.selected) {
						// invoke service method and wait for result to close the view
						CorePlugin.getInstance().serviceLocator.invoke(serverMethodToInvokeForSelection, [resourceNodeData.resourceNodeId], function(data:Object):void {
							noButton_clickHandler();
						});
						invokedServerMethod = true;
					}
				}
				if (!invokedServerMethod) {
					// if there was resource selected => server method was not invoked, no reason to wait for result
					noButton_clickHandler();
				}
			}
			
			protected function noButton_clickHandler(event:MouseEvent = null):void {
				if (handler == null) { // don't execute the default behavior, let the handler to take the lead
					CorePlugin.getInstance().nodeRegistryManager.removeNodeRegistries(nodeRegistries);
				}
				if (handler != null) { // execute handler before closing view
					handler();
				}
				closeView();	
			}
			
			protected function closeView():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
			
			public function additionalCloseHandler():void {	
				// nothing to do
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="singleResourceNode" />
		<s:State name="multipleResourceNodes" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout paddingBottom="5" paddingTop="10" paddingLeft="5" paddingRight="5" />
	</s:layout>
	
	<s:RichText text.singleResourceNode="{labelForSingleResourceNode}" 
				includeIn="singleResourceNode"
				width="100%" height="100%" />
	
	<s:VGroup width="100%" height="100%" includeIn="multipleResourceNodes">
		<s:Label text="{labelForMultipleResourceNodes}"/>
		<s:List id="list" width="100%" height="100%" dataProvider="{resourceNodes}">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<fx:Script>
							<![CDATA[
								import org.flowerplatform.flex_client.core.CorePlugin;
													
							]]>
						</fx:Script>
						<s:layout>
							<s:HorizontalLayout paddingBottom="3" paddingTop="3" paddingLeft="3" paddingRight="3"/>
						</s:layout>
						
						<s:CheckBox id="cbResourceNode"
									label="{CorePlugin.getInstance().resourceNodesManager.getResourceNodeLabel(data.resourceNodeId)}" 
									selected="{data.selected}" change="{data.selected = !data.selected}" />
					</s:ItemRenderer>					
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		
		<s:HGroup horizontalAlign="left" width="100%">
			<s:Button label="{Resources.getMessage('select.all')}" click="setAllSelected(true)"/>
			<s:Button label="{Resources.getMessage('deselect.all')}" click="setAllSelected(false)" />
		</s:HGroup>
	</s:VGroup>
	
	<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" paddingTop="10">
		<s:Button id="yesButton" 
				  label.singleResourceNode="{FlexUtilAssets.INSTANCE.getMessage('dialog.yes')}"
				  label.multipleResourceNodes="{FlexUtilAssets.INSTANCE.getMessage('dialog.ok')}" 
				  click="yesButton_clickHandler(event)"
				   />
		<s:Button id="noButton" 
				  includeIn="singleResourceNode" 				 
				  label.singleResourceNode="{FlexUtilAssets.INSTANCE.getMessage('dialog.no')}" 
				  click="noButton_clickHandler(event)"
				  />
		<s:Button id="cancelButton" 
				  label="{FlexUtilAssets.INSTANCE.getMessage('dialog.cancel')}" 
				  click="closeView()"/>
	</s:HGroup>
	
</s:Group>
