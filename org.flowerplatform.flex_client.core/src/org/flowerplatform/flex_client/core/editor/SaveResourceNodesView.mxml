<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.UIComponent;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flexutil.FlexUtilAssets;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.view_content_host.IViewContent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			import org.flowerplatform.flexutil.view_content_host.IViewHostAware;

			private var resultHandler:IDialogResultHandler;
						
			private var allResourceNodes:ArrayList;			
			private var editors:ArrayList;		
			
			[Bindable]
			private var dirtyResourceNodes:ArrayList;
			
			private var _viewHost:IViewHost;
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
			
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				_viewHost = viewHost;
				_viewHost.setLabel(CorePlugin.getInstance().getMessage("save.title"));
				if (currentState == "singleResourceNode") {					
					_viewHost.setIcon(CorePlugin.getInstance().getResourceUrl('images/disk.png'));
				} else {
					_viewHost.setIcon(CorePlugin.getInstance().getResourceUrl('images/disk_multiple.png'));
				}				
			}		
			
			public function show(resourceNodes:IList, editors:IList = null):void {								
				if (editors != null) {
					this.editors = new ArrayList(editors.toArray());
					this.allResourceNodes = CorePlugin.getInstance().resourceNodesManager.getResourceNodesFromEditors(this.editors);
				} else {
					this.allResourceNodes = new ArrayList(resourceNodes.toArray());
				}
				
				dirtyResourceNodes = CorePlugin.getInstance().resourceNodesManager.getDirtyResourceNodes(allResourceNodes);
				
				var width:Number = 400, height:Number = 300;
				switch (dirtyResourceNodes.length) {
					case 0:
						noButton_clickHandler();
						return;
					case 1:
						currentState = "singleResourceNode";
						height= 150;
						break;
					default:
						currentState = "multipleResourceNodes";
				}
				
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()				
					.setViewContent(this)
					.setWidth(width)
					.setHeight(height)
					.show();
			}
								
			protected function closeView():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
			
			protected function setAllSelected(value:Boolean):void {
				for (var i:int = 0; i < dirtyResourceNodes.length; i++) {
					var resourceNodeData:ResourceNodeData = ResourceNodeData(dirtyResourceNodes.getItemAt(i));
					resourceNodeData.selected = value;
				}
			}
			
			protected function yesButton_clickHandler(event:MouseEvent):void {
				for (var i:int = 0; i < dirtyResourceNodes.length; i++) {
					var resourceNodeData:ResourceNodeData = ResourceNodeData(dirtyResourceNodes.getItemAt(i));
					if (resourceNodeData.selected) {
						CorePlugin.getInstance().serviceLocator.invoke("nodeService.saveResource", [resourceNodeData.resourceNodeId]);
					}
				}
				
				noButton_clickHandler();
			}
			
			protected function noButton_clickHandler(event:MouseEvent = null):void {
				var i:int, j:int;
				if (editors != null) {
					for (i = 0; i < editors.length; i++) {
						var editor:EditorFrontend = EditorFrontend(editors.getItemAt(i));
						
//						var resourceNodes:ArrayList = new ArrayList(editor.rootNodeIds.toArray());
//						for (j = 0; j < resourceNodes.length; j++) {		
//							removeEditorFromResourceNode(String(resourceNodes.getItemAt(j)), editor);
//						}
					}
				} else {
					for (i = 0; i < allResourceNodes.length; i++) {
						var resourceNode:String = String(allResourceNodes.getItemAt(i));
						
//						var editors:ArrayList = new ArrayList(CorePlugin.getInstance().resourceNodesManager.rootNodeIdToEditors.getEditors(resourceNode).toArray());
//						for (j = 0; j < editors.length; j++) {							
//							removeEditorFromResourceNode(resourceNode, EditorFrontend(editors.getItemAt(j)));
//						}
					}
				}
				closeView();	
			}
			
			private function removeEditorFromResourceNode(resourceNode:String, editor:EditorFrontend):void {
				// remove from maps
//				CorePlugin.getInstance().resourceNodesManager.rootNodeIdToEditors.removeEditor(resourceNode, editor);
				
				// remove editor from workbench
				var component:UIComponent = editor;
				if (component is IViewContent && component is IViewHostAware) {
					// diagram case: viewContent is wrapped in WorkbenchViewHost, so get the exact component registered in layout
					component = UIComponent(IViewHostAware(component).viewHost);
				}
				FlexUtilGlobals.getInstance().workbench.closeView(component, false);
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="singleResourceNode" />
		<s:State name="multipleResourceNodes" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout paddingBottom="5" paddingTop="10" paddingLeft="5" paddingRight="5" />
	</s:layout>
	
	<s:RichText text.singleResourceNode="{CorePlugin.getInstance().getMessage('save.singleResourceNode.message', [CorePlugin.getInstance().resourceNodesManager.getResourceNodeLabel(dirtyResourceNodes.getItemAt(0).resourceNodeId)])}" 
				includeIn="singleResourceNode"
				width="100%" height="100%" />
	
	<s:VGroup width="100%" height="100%" includeIn="multipleResourceNodes">
		<s:Label text="{CorePlugin.getInstance().getMessage('save.multipleResourceNodes.label')}"/>
		<s:List id="list" width="100%" height="100%" dataProvider="{dirtyResourceNodes}">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<fx:Script>
							<![CDATA[
								import org.flowerplatform.flex_client.core.CorePlugin;																
							]]>
						</fx:Script>
						<s:layout>
							<s:HorizontalLayout paddingBottom="3" paddingTop="3" paddingLeft="3" paddingRight="3"/>
						</s:layout>
						
						<s:CheckBox id="cbResourceNode"
									label="{CorePlugin.getInstance().resourceNodesManager.getResourceNodeLabel(String(data.resourceNodeId))}" 
									selected="{data.selected}" change="{data.selected = !data.selected}" />
					</s:ItemRenderer>					
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		
		<s:HGroup horizontalAlign="left" width="100%">
			<s:Button label="Select All" click="setAllSelected(true)"/>
			<s:Button label="Deselect All" click="setAllSelected(false)" />
		</s:HGroup>
	</s:VGroup>
	
	<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" paddingTop="10">
		<s:Button id="yesButton" 
				  label.singleResourceNode="{FlexUtilAssets.INSTANCE.getMessage('dialog.yes')}"
				  label.multipleResourceNodes="{FlexUtilAssets.INSTANCE.getMessage('dialog.ok')}" 
				  click="yesButton_clickHandler(event)"
				   />
		<s:Button id="noButton" 
				  includeIn="singleResourceNode" 				 
				  label.singleResourceNode="{FlexUtilAssets.INSTANCE.getMessage('dialog.no')}" 
				  click="noButton_clickHandler(event)"
				  />
		<s:Button id="cancelButton" 
				  label="{FlexUtilAssets.INSTANCE.getMessage('dialog.cancel')}" 
				  click="closeView()"/>
	</s:HGroup>
	
</s:Group>
