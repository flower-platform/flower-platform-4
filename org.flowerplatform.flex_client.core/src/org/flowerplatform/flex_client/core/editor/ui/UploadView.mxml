<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!-- 
 @author Cristina Constantinescu
-->
<host:BasicViewContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 xmlns:host="org.flowerplatform.flexutil.view_content_host.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.EditorFrontend;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.core.node.NodeRegistry;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexutil.FlexUtilAssets;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.Utils;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.IWorkbench;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			private static const ZIP_EXTENSION:String = ".zip";
			
			public var uploadLocationNode:Node;
			
			protected var fileReference:FileReference;
							
			override protected function creationCompleteHandler(event:FlexEvent):void {	
				okButton.label = Resources.getMessage('upload.label');
				okButton.enabled = false;
				
				fileReference = new FileReference();
				fileReference.addEventListener(Event.SELECT, onSelectHandler);
				fileReference.addEventListener(ProgressEvent.PROGRESS, onProgressHandler);
				fileReference.addEventListener(Event.COMPLETE, onCompleteHandler);		
				fileReference.addEventListener(IOErrorEvent.IO_ERROR, onIoErrorHandler);
			}
						
			protected function browse_clickHandler(event:MouseEvent):void {
				fileReference.browse();
			}
			
			override protected function okHandler(event:Event = null):void {
				if (Utils.endsWith(fileReference.name, ZIP_EXTENSION)) {
					FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setText(Resources.getMessage("upload.make.archive"))
						.setTitle(Resources.getMessage("info"))
						.setWidth(300)
						.setHeight(200)
						.addButton(FlexUtilAssets.INSTANCE.getMessage('dialog.yes'), function():void {prepareToUpload(true);})
						.addButton(FlexUtilAssets.INSTANCE.getMessage('dialog.no'), function():void {prepareToUpload();})
						.showMessageBox();				
				} else {
					prepareToUpload();
				}
			}
						
			protected function prepareToUpload(unzipFile:Boolean=false):void {				
				CorePlugin.getInstance().serviceLocator.invoke("uploadService.prepareUpload", [uploadLocationNode.nodeUri, fileReference.name, unzipFile], 
					function(result:Object):void {
						if (result) {
							var request:URLRequest = new URLRequest();
							request.url = FlexUtilGlobals.getInstance().rootUrl + String(result);
							request.method = "POST";
							request.contentType = "multipart/form-data";
							
							fileReference.upload(request);
							
							progressArea.visible = true;
							okButton.enabled = false;
							browseBtn.enabled = false;		
						}
					}
				);
			}
			
			protected function onSelectHandler(event:Event):void {
				locationTxt.text = fileReference.name;	
				okButton.enabled = true;
			}
					
			protected function onIoErrorHandler(event:IOErrorEvent):void {				
				FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
					.setTitle(Resources.getMessage("error"))
					.setText(event.text)
					.showMessageBox();
				cancelHandler();
			}
			
			protected function onProgressHandler(event:ProgressEvent):void {
				var proc:uint = (event.bytesLoaded / event.bytesTotal) * 100;				
				progressLabel.text = Resources.getMessage("upload.progress", [proc]);
			}
			
			protected function onCompleteHandler(event:Event):void {
				// refresh node data
				var workbench:IWorkbench = FlexUtilGlobals.getInstance().workbench;			
				var activeComponent:UIComponent = workbench.getEditorFromViewComponent(workbench.getActiveView());
				
				if (activeComponent is EditorFrontend) {
					var nodeRegistry:NodeRegistry = EditorFrontend(activeComponent).nodeRegistry;
					nodeRegistry.refresh(uploadLocationNode);					
				}
				
				cancelHandler();
			}
						
			override public function additionalCloseHandler():void {
				fileReference.cancel();
			}
			
		]]>
	</fx:Script>
	
	<s:Label text="{Resources.getMessage('upload.file')}"  />
	<s:HGroup width="100%">			
		<s:TextInput id="locationTxt" width="100%" editable="false" />
		<s:Button id="browseBtn" label="{Resources.getMessage('upload.browse')}" click="browse_clickHandler(event)" />					
	</s:HGroup>		
	
	<s:Label text="{Resources.getMessage('upload.limit.max')}" height="100%"  />
	
	<s:HGroup width="100%" id="progressArea" visible="false" verticalAlign="middle">
		<s:BusyIndicator id="progressSpinner" />
		<s:Label id="progressLabel" width="100%" />
	</s:HGroup>
		
</host:BasicViewContent>
