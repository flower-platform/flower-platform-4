<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2014 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!---
 @author Cristina Constantinescu
-->
<host:BasicViewContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:host="org.flowerplatform.flexutil.view_content_host.*">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import spark.events.TextOperationEvent;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexdiagram.DiagramShellContext;
			import org.flowerplatform.flexdiagram.FlexDiagramConstants;
			import org.flowerplatform.flexdiagram.renderer.BaseRenderer;
			import org.flowerplatform.flexutil.ClassFactoryWithConstructor;
			import org.flowerplatform.flexutil.Utils;
			import org.flowerplatform.flexutil.controller.TypeDescriptorRegistry;
										
			public var node:Node;
			public var text:String;
					
			/**
			 * If <code>true</code>, the node's renderer will be displayed at the bottom.
			 * <p>
			 * All changes made in <code>textEditor</code> will be reflected in this renderer.
			 */ 
			[Bindable]
			public var showRendererArea:Boolean = true;
			public var diagramShellContext:DiagramShellContext;			
			
			public var resultHandler:Function;
			
			protected var renderer:BaseRenderer;			
									
			override protected function initializeHandler(event:FlexEvent):void {
				super.initializeHandler(event);
				if (showRendererArea) {
					renderer.data = ObjectUtil.copy(node);			
				}		
				if (text != null) {
					text = Utils.getCompatibleHTMLText(text);
					// if text contains html tag, display it as html, otherwise plain text
					textEditor.textFlow = TextConverter.importToFlow(text , Utils.isHTMLText(text) ? TextConverter.TEXT_FIELD_HTML_FORMAT : TextConverter.PLAIN_TEXT_FORMAT);
				}
			}
			
			override protected function createChildren():void {
				super.createChildren();
				
				if (showRendererArea) {
					var rendererClass:Class = getDefinitionByName(getQualifiedClassName(diagramShellContext.diagramShell.getRendererForModel(diagramShellContext, node))) as Class;
					renderer = new ClassFactoryWithConstructor(rendererClass).newInstance();
					renderer.diagramShellContext = diagramShellContext;		
					renderer.depth = 1;
					rendererArea.addElement(renderer);
				}
			}
			
			/**
			 * @author Sebastian Solomon
			 */
			override protected function creationCompleteHandler(event:FlexEvent):void {
				super.creationCompleteHandler(event);
				focusManager.setFocus(textEditor);
			}
			
			override public function okHandler(event:Event = null):void {
				resultHandler(textEditor.text);				
			}
									
			public function textChangeHandler(event:TextOperationEvent):void {
				if (!showRendererArea) {
					return;
				}
				// set new text
				var registry:TypeDescriptorRegistry = diagramShellContext.diagramShell.getRegistryForModel(node);
				var titleProperty:String = 
						CorePlugin.getInstance().getNodeValuesProviderForMindMap(registry, node)
							.getPropertyName(registry, node, FlexDiagramConstants.BASE_RENDERER_TEXT);
				renderer.data.properties[titleProperty] = textEditor.text;		
			}
			
		]]>
	</fx:Script>
		
	<s:TextArea id="textEditor" width="100%" height="100%" change="textChangeHandler(event)" />
	
	<s:Label id="previewLabel" text="{Resources.getMessage('renderer.preview')}" width="100%" paddingTop="20" includeInLayout="{showRendererArea}" visible="{showRendererArea}" />
	<s:Group id="buttomPart" width="100%" height="50%" includeInLayout="{showRendererArea}" visible="{showRendererArea}">		
		<s:Rect width="100%" height="100%" depth="1">
			<s:stroke>
				<s:SolidColorStroke color="gray" />
			</s:stroke>
		</s:Rect>
		<s:Scroller width="100%" height="100%">			
			<s:viewport>					
				<s:HGroup id="rendererArea" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" />
			</s:viewport>		
		</s:Scroller>
	</s:Group>
		
</host:BasicViewContent>
