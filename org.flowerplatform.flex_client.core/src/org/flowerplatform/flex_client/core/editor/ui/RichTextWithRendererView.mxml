<?xml version="1.0" encoding="utf-8"?>
<!---
 @author Cristina Constantinescu
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent"
		 width="100%" height="100%" initialize="initializeHandler(event)"
		 creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.core.editor.update.event.NodeUpdatedEvent;
			import org.flowerplatform.flex_client.core.node.controller.GenericValueProviderFromDescriptor;
			import org.flowerplatform.flex_client.core.node.controller.NodeControllerUtils;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexdiagram.DiagramShellContext;
			import org.flowerplatform.flexdiagram.mindmap.AbstractMindMapModelRenderer;
			import org.flowerplatform.flexutil.FactoryWithInitialization;
			import org.flowerplatform.flexutil.FlexUtilAssets;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.Utils;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			import spark.events.TextOperationEvent;
										
			public var node:Node;
			public var text:String;
					
			/**
			 * If <code>true</code>, the node's renderer will be displayed at the bottom.
			 * <p>
			 * All changes made in <code>textEditor</code> will be reflected in this renderer.
			 */ 
			[Bindable]
			public var showRendererArea:Boolean = true;
			public var diagramShellContext:DiagramShellContext;			
			
			public var resultHandler:Function;
			
			protected var renderer:AbstractMindMapModelRenderer;			
			protected var _viewhost:IViewHost;			
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				_viewhost = viewHost;
			}
						
			protected function initializeHandler(event:FlexEvent):void {
				if (showRendererArea) {
					renderer.data = ObjectUtil.copy(node);			
				}		
				if (text != null) {
					text = Utils.getCompatibleHTMLText(text);
					// if text contains html tag, display it as html, otherwise plain text
					textEditor.textFlow = TextConverter.importToFlow(text , Utils.isHTMLText(text) ? TextConverter.TEXT_FIELD_HTML_FORMAT : TextConverter.PLAIN_TEXT_FORMAT);
				}
			}
			
			override protected function createChildren():void {
				super.createChildren();
				
				if (showRendererArea) {
					var rendererClass:Class = getDefinitionByName(getQualifiedClassName(diagramShellContext.diagramShell.getRendererForModel(diagramShellContext, node))) as Class;
					renderer = new FactoryWithInitialization(rendererClass).newInstance();
					renderer.diagramShellContext = diagramShellContext;		
					renderer.drawOnlyBorderGraphics = true;
					renderer.depth = 1;
					rendererArea.addElement(renderer);
				}
			}
			
			/**
			 * @author Sebastian Solomon
			 */
			protected function creationCompleteHandler(flexvent:FlexEvent):void {
				focusManager.setFocus(textEditor);
			}
			
			protected function okButton_clickHandler(event:MouseEvent):void {
				resultHandler(textEditor.text);				
			}
			
			protected function cancelButton_clickHandler(event:MouseEvent = null):void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
						
			public function textChangeHandler(event:TextOperationEvent):void {
				if (!showRendererArea) {
					return;
				}
				// set new text
				var titleProperty:String = NodeControllerUtils.getTitleProvider(diagramShellContext.diagramShell.registry, node).getPropertyNameFromGenericDescriptor(node);				
				renderer.data.properties[titleProperty] = textEditor.text;
					
				// dispatch event to update preview renderer's text
				renderer.data.dispatchEvent(new NodeUpdatedEvent(Node(renderer.data), new ArrayList([titleProperty])));				
			}
						
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" gap="5" paddingTop="5" paddingBottom="5" paddingRight="5" paddingLeft="5" />
	</s:layout>
	
	<s:TextArea id="textEditor" width="100%" height="100%" change="textChangeHandler(event)" />
	
	<s:Label id="previewLabel" text="{Resources.getMessage('renderer.preview')}" width="100%" paddingTop="20" includeInLayout="{showRendererArea}" visible="{showRendererArea}" />
	<s:Group id="buttomPart" width="100%" height="50%" includeInLayout="{showRendererArea}" visible="{showRendererArea}">		
		<s:Rect width="100%" height="100%" depth="1">
			<s:stroke>
				<s:SolidColorStroke color="gray" />
			</s:stroke>
		</s:Rect>
		<s:Scroller width="100%" height="100%">			
			<s:viewport>					
				<s:HGroup id="rendererArea" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" />
			</s:viewport>		
		</s:Scroller>
	</s:Group>
	
	<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" paddingTop="10">
		<s:Button id="okButton" label="{FlexUtilAssets.INSTANCE.getMessage('dialog.ok')}" click="okButton_clickHandler(event)"/>
		<s:Button id="cancelButton" label="{FlexUtilAssets.INSTANCE.getMessage('dialog.cancel')}" click="cancelButton_clickHandler(event)"/>
	</s:HGroup>
	
</s:Group>
