<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2014 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!--
This is a confirmation dialog to open a node in a new editor. 

<p>
The result passed to the result handler is <code>true</code> if the action was confirmed and <code>false</code>
otherwise, so the UI can react accordingly (e.g. expand/collapse nodes in the editor where the action was triggered).

<p>
The dialog is <b>not</b> shown if this action is set as default (i.e. the "remember setting" checkbox was set
previously), and a new editor is opened directly.

@author Mariana Gheorghe
-->
<host:BasicViewContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:host="org.flowerplatform.flexutil.view_content_host.*"
		 implements="org.flowerplatform.flexutil.dialog.IDialog">
		
	<s:Label text="{Resources.getMessage('editor.openInNewEditor.message')}"/>
	<s:CheckBox id="rememberSetting" label="{Resources.getMessage('editor.openInNewEditor.remember')}" selected="true"/>
		
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexutil.FlexUtilAssets;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			public var node:Node;
			
			private const OPEN_IN_NEW_EDITOR:String = "openInNewEditor";
			
			/**
			 * Shows the dialog if the "always open in new editor" is not set.
			 */
			public function show():void {
				if (alwaysOpenInNewEditor) {
					openInNewEditor();
				} else {
					FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
						.setViewContent(this)
						.setTitle(Resources.getMessage("editor.openInNewEditor.title"))
						.setWidth(400)
						.setHeight(150)
						.show();
				}
			}
			
			private function get alwaysOpenInNewEditor():Boolean {
				var so:SharedObject = SharedObject.getLocal(OPEN_IN_NEW_EDITOR);
				if (so.data.enabled) {
					return true;
				}
				return false;
			}
			
			private function set alwaysOpenInNewEditor(value:Boolean):void {
				var so:SharedObject = SharedObject.getLocal(OPEN_IN_NEW_EDITOR);
				so.data.enabled = true;
				so.flush();
			}
			
			override protected function okHandler(event:Event = null):void {
				if (rememberSetting.selected) {
					alwaysOpenInNewEditor = true;					
				}
				openInNewEditor();
			}
			
			override protected function cancelHandler(event:Event = null):void {
				_resultHandler.handleDialogResult(false);
				super.cancelHandler();
			}
			
			private function openInNewEditor():void {
				CorePlugin.getInstance().openEditor(node);
				_resultHandler.handleDialogResult(true);
				super.cancelHandler();
			}
				
			private var _resultHandler:IDialogResultHandler;
			
			public function setResultHandler(resultHandler:IDialogResultHandler):void {
				_resultHandler = resultHandler;
			}
			
		]]>
	</fx:Script>
	
</host:BasicViewContent>
