<?xml version="1.0" encoding="utf-8"?>
<!--
 @author Cristina Constantinescu
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" implements="org.flowerplatform.flexutil.view_content_host.IViewContent"
		 creationComplete="creationCompleteHandler(event)" >
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.collections.ISummaryCalculator;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexutil.FlexUtilAssets;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.Utils;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.shortcut.Shortcut;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			public var actionId:String;
			
			protected var _viewhost:IViewHost;
			
			protected var shortcut:Shortcut;
			
			public function getActions(selection:IList):Vector.<IAction> {				
				return null;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				_viewhost = viewHost;
				_viewhost.setLabel(Resources.getMessage("shortcut.enter"));
				_viewhost.setIcon(Resources.keyboardIcon);
			}
						
			protected function creationCompleteHandler(event:FlexEvent):void {
				// add listener with the biggest priority -> NO OTHER listeners must intercept key_down events
				UIComponent(FlexGlobals.topLevelApplication).stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler1, false, int.MAX_VALUE);	
				
				Utils.makePseudoDisabled(txtShortcut);
			}
					
			private function keyDownHandler1(event:KeyboardEvent):void {
				event.stopImmediatePropagation();
				event.stopPropagation();
				
				event.preventDefault();
				
				if (event.keyCode == Keyboard.CONTROL || event.keyCode == Keyboard.COMMAND || event.keyCode == Keyboard.SHIFT || event.keyCode == Keyboard.ALTERNATE) {
					return;
				}		
				
				shortcut = new Shortcut(event.ctrlKey, event.shiftKey, event.altKey, event.keyCode);
				var shortcutLabel:String = shortcut.toString();
				if (shortcutLabel == null) {
					return;
				}
				
				txtShortcut.text = shortcutLabel;
			}
				
			protected function okButton_clickHandler(event:MouseEvent):void {
				if (shortcut != null && shortcut.toString() != null) {
					if (!FlexUtilGlobals.getInstance().keyBindings.registerBinding(shortcut, actionId)) {
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()		
							.setText(Resources.getMessage("shortcut.already.used"))
							.setWidth(400)
							.setHeight(200)
							.showMessageBox();
						return;
					}
				}
				cancelButton_clickHandler();
			}
			
			protected function cancelButton_clickHandler(event:MouseEvent = null):void {
				// important to remove listener after using it -> otherwise BIG problems (no other key_down events will be dispatched)
				UIComponent(FlexGlobals.topLevelApplication).stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler1);
				
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
				
				FlexUtilGlobals.getInstance().keyBindings.learnShortcutOnNextActionInvocation = false;
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" verticalAlign="middle" paddingTop="10">
		<s:TextInput id="txtShortcut" width="100%" tabFocusEnabled="false" />
		<s:Button label="Clear" click="{txtShortcut.text = ''}" tabFocusEnabled="false" />
	</s:HGroup>
	
	<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" paddingTop="10">
		<s:Button id="okButton" label="{FlexUtilAssets.INSTANCE.getMessage('dialog.ok')}" click="okButton_clickHandler(event)" tabFocusEnabled="false" />
		<s:Button id="cancelButton" label="{FlexUtilAssets.INSTANCE.getMessage('dialog.cancel')}" click="cancelButton_clickHandler(event)" tabFocusEnabled="false"/>
	</s:HGroup>
	
</s:Group>
