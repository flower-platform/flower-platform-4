<?xml version="1.0" encoding="utf-8"?>
<!---
 @author Cristina Constantinescu
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, org.flowerplatform.flexutil.dialog.IDialog"
		 width="100%" height="100%" initialize="initializeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.update.event.NodeUpdatedEvent;
			import org.flowerplatform.flex_client.core.mindmap.remote.Node;
			import org.flowerplatform.flex_client.core.mindmap.renderer.NodeRenderer;
			import org.flowerplatform.flex_client.core.node.controller.GenericDescriptorValueProvider;
			import org.flowerplatform.flex_client.core.node.controller.NodeControllerUtils;
			import org.flowerplatform.flexdiagram.DiagramShellContext;
			import org.flowerplatform.flexutil.FactoryWithInitialization;
			import org.flowerplatform.flexutil.FlexUtilAssets;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			import spark.events.TextOperationEvent;
			
			
					
			public var rendererClass:Class;
			public var rendererModel:Node;
			public var diagramShellContext:DiagramShellContext;
			
			protected var renderer:NodeRenderer;
			
			protected var _viewhost:IViewHost;
			
			protected var resultHandler:IDialogResultHandler;
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				_viewhost = viewHost;
				_viewhost.setIcon(CorePlugin.getInstance().getResourceUrl("images/edit.png"));
			}
			
			public function setResultHandler(resultHandler:IDialogResultHandler):void {
				this.resultHandler = resultHandler;
			}
			
			protected function initializeHandler(event:FlexEvent):void {
				renderer.data = rendererModel;
				var titleProvider:GenericDescriptorValueProvider = NodeControllerUtils.getTitleProvider(diagramShellContext.diagramShell.registry, rendererModel);
				textEditor.text = String(titleProvider.getValue(rendererModel));
			}
			
			override protected function createChildren():void {
				super.createChildren();
				
				renderer = new FactoryWithInitialization(rendererClass).newInstance();
				renderer.diagramShellContext = diagramShellContext;		
				renderer.drawGraphicsOnlyFromBaseClass = true;
				renderer.depth = 1;
				rendererArea.addElement(renderer);				
			}
			
			protected function okButton_clickHandler(event:MouseEvent):void {
				resultHandler.handleDialogResult({fullNodeId: rendererModel.fullNodeId, name: textEditor.text});
				cancelButton_clickHandler();
			}
			
			protected function cancelButton_clickHandler(event:MouseEvent = null):void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
						
			public function textChangeHandler(event:TextOperationEvent):void {
				// set new text
				var titleProvider:GenericDescriptorValueProvider = NodeControllerUtils.getTitleProvider(diagramShellContext.diagramShell.registry, rendererModel);
				var titleProperty:String = titleProvider.getPropertyNameFromGenericDescriptor(rendererModel);
				renderer.data.properties[titleProperty] = textEditor.text;
				
				// dispatch event to update preview renderer's text
				renderer.data.dispatchEvent(new NodeUpdatedEvent(Node(renderer.data), new ArrayList([titleProperty])));
			}
						
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" gap="5" paddingTop="5" paddingBottom="5" paddingRight="5" paddingLeft="5" />
	</s:layout>
	
	<s:TextArea id="textEditor" width="100%" height="50%" change="textChangeHandler(event)" />
	
	<s:Label text="{CorePlugin.getInstance().getMessage('rename.preview')}" width="100%" paddingTop="20" />
	<s:Group width="100%" height="50%">		
		<s:Rect width="100%" height="100%" depth="1">
			<s:stroke>
				<s:SolidColorStroke color="gray" />
			</s:stroke>
		</s:Rect>
		<s:Scroller width="100%" height="100%">			
			<s:viewport>					
				<s:HGroup id="rendererArea" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" />
			</s:viewport>		
		</s:Scroller>
	</s:Group>
	
	<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" paddingTop="10">
		<s:Button id="okButton" label="{FlexUtilAssets.INSTANCE.getMessage('dialog.ok')}" click="okButton_clickHandler(event)"/>
		<s:Button id="cancelButton" label="{FlexUtilAssets.INSTANCE.getMessage('dialog.cancel')}" click="cancelButton_clickHandler(event)"/>
	</s:HGroup>
	
</s:Group>
