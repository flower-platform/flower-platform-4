<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2014 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!---
@author Cristian Spiescu
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" initialize="initializeHandler()" xmlns:properties="org.flowerplatform.flexutil.properties.*" implements="org.flowerplatform.flexutil.view_content_host.IViewContent">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			
			import spark.events.IndexChangeEvent;
			
			import org.apache.flex.collections.VectorList;
			import org.flowerplatform.flexutil.FlexUtilConstants;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.controller.TypeDescriptorRegistry;
			import org.flowerplatform.flexutil.flexdiagram.StandAloneSequentialLayoutVisualChildrenController;
			import org.flowerplatform.flexutil.properties.PropertiesHelper;
			import org.flowerplatform.flexutil.properties.PropertyCommitController;
			import org.flowerplatform.flexutil.properties.PropertyDescriptor;
			import org.flowerplatform.flexutil.properties.PropertyEntryRendererController;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			
			
			[Bindable]
			protected var dataProvider:IList;
			
			public function additionalCloseHandler():void {
			}
			
			public function set viewHost(viewHost:IViewHost):void {
			}
			
			protected function initializeHandler():void {
				dataProvider = new VectorList();
				var model:SamplePropertiesModel;
				
				model = new SamplePropertiesModel();
				model.text = "Model 1";
				model.properties.p1 = "v1";
				model.properties.p2 = "v2";
				dataProvider.addItem(model);
				
				model = new SamplePropertiesModel();
				model.text = "Model 2";
				dataProvider.addItem(model);
				
				model = new SamplePropertiesModel();
				model.text = "Model 3";
				dataProvider.addItem(model);
				list.selectedIndex = 0;
				listChangeHandler(null);

				var propertiesContext:Object = new Object();

				propertiesContext[FlexUtilConstants.PROPERTIES_CONTEXT_SHOW_REMOVE_PROPERTY] = 
					propertiesContext[FlexUtilConstants.PROPERTIES_CONTEXT_SHOW_ADD_PROPERTY] = 
					propertiesContext[FlexUtilConstants.PROPERTIES_CONTEXT_INCLUDE_PROPERTIES_WITHOUT_DESCRIPTOR] = true;
				propertiesForm.context = propertiesContext;
			}
			
			protected function listChangeHandler(event:IndexChangeEvent):void {
				propertiesForm.data = list.selectedItem;
				if (propertiesForm.data == null || !propertiesForm.data.properties.hasOwnProperty(property.text)) {
					value.text = null;
				} else {
					value.text = propertiesForm.data.properties[property.text];
				}
			}
			
			protected function showQuickFormclickHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
					.setTitle("Quick Form")
					.setViewContent(
						new PropertiesForm().createQuickPropertiesForm(null, propertiesForm.typeDescriptorRegistry, new Object(), new ArrayCollection([
							new PropertyDescriptor().setName("field1"),
							new PropertyDescriptor().setName("field2").setLabel("Field 2"),
							new PropertyDescriptor().setName("field3").setLabel("Field 3").setType(FlexUtilConstants.PROPERTY_EDITOR_TYPE_BOOLEAN)])))
					.show(false);
			}
			
		]]>
	</fx:Script>
	<s:Panel title="Sample Data" height="30%">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Label text="@see also: The mind map sample, in flexdiagram.samples, using 'Edit properties in renderer'"/>
		<s:List id="list" dataProvider="{dataProvider}" width="100%" height="100%" change="listChangeHandler(event)"/>	
		<s:HGroup verticalAlign="middle">
			<s:Label text="Property"/>
			<s:TextInput id="property" text="hasGroupWithoutGroupDescriptor1"/>
			<s:Label text="Value"/>
			<s:TextInput id="value"/>
			<s:Button label="Change" click="propertiesForm.data.properties[property.text] = value.text;"/>
		</s:HGroup>
		<s:Button label="Reset Selection" click="list.selectedItem = null; listChangeHandler(null)"/>
		<s:Button label="Show Quick Form" click="showQuickFormclickHandler()"/>
	</s:Panel>
	<s:Panel title="Properties" height="70%">
		<s:Scroller height="100%" width="100%">
			<s:HGroup width="100%">
				<properties:PropertiesForm id="propertiesForm" width="100%" 
					visualChildrenController="{new StandAloneSequentialLayoutVisualChildrenController(0, null, new PropertyEntryRendererController(new PropertyCommitController()))}"
					typeDescriptorRegistry="{PropertiesHelper.registerPropertyRenderers(new TypeDescriptorRegistry())}"
					propertiesHelper="{new SamplePropertiesHelper()}"
					/>
			</s:HGroup>
		</s:Scroller>
	</s:Panel>
</s:Group>
