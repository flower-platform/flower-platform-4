<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="creationCompleteHandler(event)"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, mx.managers.IFocusManagerComponent">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.core.editor.update.event.NodeUpdatedEvent;
			import org.flowerplatform.flex_client.core.node.controller.GenericValueProviderFromDescriptor;
			import org.flowerplatform.flex_client.core.node.controller.NodeControllerUtils;
			import org.flowerplatform.flex_client.properties.property_renderer.CategoryPropertyRenderer;
			import org.flowerplatform.flex_client.properties.remote.PropertyDescriptor;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.selection.ISelectionProvider;
			import org.flowerplatform.flexutil.selection.SelectionChangedEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			protected var _viewHost:IViewHost;
			
			protected function creationCompleteHandler(flexvent:FlexEvent):void {
//				// get selection from active provider to populate properties list with data
				var activeSelectionProvider:ISelectionProvider = FlexUtilGlobals.getInstance().selectionManager.activeSelectionProvider;
				if (activeSelectionProvider != null) {
					// create dummy event
					var event:SelectionChangedEvent = new SelectionChangedEvent();
					event.selection = activeSelectionProvider.getSelection();
					
					selectionChangedHandler(event);
				}
//				// listen for selection changes
				FlexUtilGlobals.getInstance().selectionManager.addEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
				IEventDispatcher( _viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);
			}
			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {
				FlexUtilGlobals.getInstance().selectionManager.removeEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
			}
						
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
						
			private function selectionChangedHandler(event:SelectionChangedEvent):void {
				var node:Node;
													
				propertyForm.removeAllElements();
				label.text = "";

				if (event.selection == null || event.selection.length == 0 || !(event.selection.getItemAt(0) is Node)) { // happens when changing active view					
					return;
				}
				// get new selected node
				node = Node(event.selection.getItemAt(0));
				
				if (node.parent == null && node.children == null) { // root node, don't populate with properties
					return;					
				}
				
				// get properties to display
				var propertyDescriptors:IList = CorePlugin.getInstance().nodeTypeDescriptorRegistry
						.getExpectedTypeDescriptor(node.type).getAdditiveControllers(PropertiesConstants.PROPERTY_DESCRIPTOR, node);

				var currentCategory:String = "";
				for ( var i:int = 0; i < propertyDescriptors.length; i++ ) {
					var propertyDescriptor:PropertyDescriptor = PropertyDescriptor(ObjectUtil.copy(propertyDescriptors.getItemAt(i)));
					var formItem:PropertyItemRenderer = new PropertyItemRenderer();
					var itemCategory:String = propertyDescriptor.category;
					if (itemCategory != currentCategory) {
						var categoryItem:CategoryPropertyRenderer = new CategoryPropertyRenderer();
						
						currentCategory = itemCategory;
						categoryItem.label = currentCategory;
						propertyForm.addElement(categoryItem);
					}
					propertyForm.addElement(formItem);
					formItem.data = propertyDescriptor;
				}
					
				// get their values from node
				nodeUpdatedHandler(new NodeUpdatedEvent(node));
				
				var titleProvider:GenericValueProviderFromDescriptor = NodeControllerUtils.getTitleProvider(
					CorePlugin.getInstance().nodeTypeDescriptorRegistry, node);
				label.text = String(titleProvider.getValue(node));
				
				// store new selection and listen for node upates
				PropertiesPlugin.getInstance().currentSelection = new ArrayList(event.selection.toArray());
				node.removeEventListener(NodeUpdatedEvent.NODE_UPDATED, nodeUpdatedHandler);
				node.addEventListener(NodeUpdatedEvent.NODE_UPDATED, nodeUpdatedHandler);
			}
			
			private function nodeUpdatedHandler(event:NodeUpdatedEvent):void {
				var node:Node = event.node;
				
				for (var i:int = 0; i < propertyForm.numElements; i++) {
					if (propertyForm.getElementAt(i) is PropertyItemRenderer) {
						var propertyItemRenderer:PropertyItemRenderer = PropertyItemRenderer(propertyForm.getElementAt(i));
						if (node.properties != null) {
							if (NodeControllerUtils.hasPropertyChanged(node, propertyItemRenderer.propertyDescriptor.name, event)) {
								if (node.properties.hasOwnProperty(propertyItemRenderer.propertyDescriptor.name + ".default")) {
									propertyItemRenderer.itemRenderedInstance.defaultValue = node.properties[propertyItemRenderer.propertyDescriptor.name + ".default"];
								}								
								PropertyDescriptor(propertyItemRenderer.data).value = node.properties[propertyItemRenderer.propertyDescriptor.name];
							}
						}
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:HGroup id = "iconAndLabel" paddingLeft="5">
		<s:Image id="icon" height="100%"/>
		<s:Label id="label" height ="100%" verticalAlign="middle"/>	
	</s:HGroup>
	
	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" height="100%">			
			<s:Form id="propertyForm" width="100%" height="100%" >
			</s:Form>
		</s:Group>
	</s:Scroller>
</s:Group>
