<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 height="182" creationComplete="creationCompleteHandler(event)"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, mx.managers.IFocusManagerComponent">
	<s:layout>
		<s:VerticalLayout useVirtualLayout="true"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.NodePropertiesConstants;
			import org.flowerplatform.flex_client.core.mindmap.remote.Node;
			import org.flowerplatform.flex_client.core.mindmap.update.event.NodeUpdatedEvent;
			import org.flowerplatform.flex_client.properties.remote.PropertyDescriptor;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.selection.ISelectionProvider;
			import org.flowerplatform.flexutil.selection.SelectionChangedEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			protected var _viewHost:IViewHost;
			
			protected function creationCompleteHandler(flexvent:FlexEvent):void {				
				propertyList.itemRenderer = new ClassFactory(PropertyItemRenderer);
				propertyList.dataProvider = new ArrayList();
				// get selection from active provider to populate properties list with data
				var activeSelectionProvider:ISelectionProvider = FlexUtilGlobals.getInstance().selectionManager.activeSelectionProvider;
				if (activeSelectionProvider != null) {
					// create dummy event
					var event:SelectionChangedEvent = new SelectionChangedEvent();
					event.selection = activeSelectionProvider.getSelection();
					
					selectionChangedHandler(event);
				}
				// listen for selection changes
				FlexUtilGlobals.getInstance().selectionManager.addEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
				IEventDispatcher( _viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);
			}
			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {
				FlexUtilGlobals.getInstance().selectionManager.removeEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
			}
						
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
						
			private function selectionChangedHandler(event:SelectionChangedEvent):void {
				var node:Node;
				
				// if previous data in properties -> remove update listener from previous node
				if (PropertiesPlugin.getInstance().currentSelection != null) {
					node = Node(PropertiesPlugin.getInstance().currentSelection.getItemAt(0));
					node.removeEventListener(NodeUpdatedEvent.NODE_UPDATED, nodeUpdatedHandler);
				}
							
				// if diagram is the new selected element -> clear data in properties
				// for event.selection == null, see SelectionManager -> dispatchEvent(SelectionChangedEvent), line 116 -> active view changed, but its selection isn't populated yet
				if (event.selection == null || event.selection.length == 0 || Node(event.selection.getItemAt(0)).idWithinResource == null) {
					icon.source = null;
					label.text = null;
					IList(propertyList.dataProvider).removeAll();
					return;
				}			
				
				// get new selected node
				node = Node(event.selection.getItemAt(0));
				
				// get properties to display
				CorePlugin.getInstance().serviceLocator.invoke(
					"nodeService.getPropertyDescriptors", [node.fullNodeId], 
						function(result:Object):void {
						// properties available -> add them in list
						propertyList.dataProvider = ArrayCollection(result);		
						// get their values from node
						nodeUpdatedHandler(new NodeUpdatedEvent(node));
						
						label.text = node.properties[NodePropertiesConstants.TEXT];
						
						// store new selection and listen for node upates
						PropertiesPlugin.getInstance().currentSelection = new ArrayList(event.selection.toArray());
						node.addEventListener(NodeUpdatedEvent.NODE_UPDATED, nodeUpdatedHandler);
					}
				);		
			}
			
			private function nodeUpdatedHandler(event:NodeUpdatedEvent):void {
				var node:Node = event.node;
				var properties:ArrayCollection = ArrayCollection(propertyList.dataProvider);
				for each (var property:PropertyDescriptor in properties) {
					if (node.properties != null) {
						if (node.properties.hasOwnProperty(property.name)) {
							var hasChanged:Boolean = event.propertiesUpdated != null ? event.propertiesUpdated.getItemIndex(property.name) != -1 : true;
							if (hasChanged) {
								property.value = node.properties[property.name];
							}
						} else {
							property.value = null;
						}
					}						
				}
			}
			
		]]>
	</fx:Script>
	<s:HGroup id = "iconAndLabel" paddingLeft="5">
		<s:Image id="icon" height="100%"/>
		<s:Label id="label" height ="100%" verticalAlign="middle"/>	
	</s:HGroup>

	<s:List id="propertyList" width="100%" height="100%">

	</s:List>
</s:Group>
