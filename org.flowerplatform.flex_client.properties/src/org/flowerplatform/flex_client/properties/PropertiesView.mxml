<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="creationCompleteHandler(event)"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, mx.managers.IFocusManagerComponent">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.NodePropertiesConstants;
			import org.flowerplatform.flex_client.core.mindmap.remote.Node;
			import org.flowerplatform.flex_client.core.mindmap.update.event.NodeUpdatedEvent;
			import org.flowerplatform.flex_client.properties.remote.CategoryItem;
			import org.flowerplatform.flex_client.properties.remote.PropertyDescriptor;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.selection.ISelectionProvider;
			import org.flowerplatform.flexutil.selection.SelectionChangedEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			protected var _viewHost:IViewHost;
			
			protected var propertiesLength:int;
			
			protected function creationCompleteHandler(flexvent:FlexEvent):void {
//				// get selection from active provider to populate properties list with data
				var activeSelectionProvider:ISelectionProvider = FlexUtilGlobals.getInstance().selectionManager.activeSelectionProvider;
				if (activeSelectionProvider != null) {
					// create dummy event
					var event:SelectionChangedEvent = new SelectionChangedEvent();
					event.selection = activeSelectionProvider.getSelection();
					
					selectionChangedHandler(event);
				}
//				// listen for selection changes
				FlexUtilGlobals.getInstance().selectionManager.addEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
				IEventDispatcher( _viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);
			}
			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {
				FlexUtilGlobals.getInstance().selectionManager.removeEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
			}
						
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
						
			private function selectionChangedHandler(event:SelectionChangedEvent):void {
				var node:Node;
				
				// get new selected node
				node = Node(event.selection.getItemAt(0));
				
				propertyForm.removeAllElements();
				
				// get properties to display
				CorePlugin.getInstance().serviceLocator.invoke(
					"nodeService.getPropertyDescriptors", [node.fullNodeId], 
					function(result:Object):void {
						result = getPropertyDescriptors(node, ArrayCollection(result));
						var currentCategory:String;
						for ( var i:int = 0; i < ArrayCollection(result).length; i++ ) {
							var formItem:PropertyItemRenderer = new PropertyItemRenderer();
							var itemCategory:String = result.getItemAt(i)["category"];
							if (itemCategory != currentCategory) {
								var categoryItem:CategoryItem = new CategoryItem();
								
								currentCategory = itemCategory;
								categoryItem.label = currentCategory;
								propertyForm.addElement(categoryItem);
							}
							propertyForm.addElement(formItem);
							formItem.data = ArrayCollection(result).getItemAt(i);
							
						}
							
						// get their values from node
						nodeUpdatedHandler(new NodeUpdatedEvent(node));
						
						label.text = (node.properties == null)? null : node.properties[NodePropertiesConstants.TEXT];
						
						// store new selection and listen for node upates
						PropertiesPlugin.getInstance().currentSelection = new ArrayList(event.selection.toArray());
						node.addEventListener(NodeUpdatedEvent.NODE_UPDATED, nodeUpdatedHandler);
					}
				);		
			}
			
			/**
			 * Adds dummy <code>PropertyDescriptor</code>s (read-only, displayed as String)
			 * for all the properties of this node, <b>ONLY</b> in debug mode.
			 * 
			 * @author Mariana Gheorghe
			 */
			private function getPropertyDescriptors(node:Node, descriptors:ArrayCollection):ArrayCollection {
				if (CorePlugin.getInstance().getDebug()) {
					// debug mode
					for (var property:String in node.properties) {
						var descriptor:PropertyDescriptor = new PropertyDescriptor();
						descriptor.value = node.properties[property];
						descriptor.name = "[debug] " + property;
						descriptor.readOnly = true;
						descriptor.type = "String";
						descriptors.addItem(descriptor);
					}
				}
				return descriptors;
			}
			
			private function nodeUpdatedHandler(event:NodeUpdatedEvent):void {
				var node:Node = event.node;
				
				for (var i:int = 0; i < propertyForm.numElements; i++) {
					if (propertyForm.getElementAt(i) is PropertyItemRenderer) {
						var propertyItemRenderer:PropertyItemRenderer = PropertyItemRenderer(propertyForm.getElementAt(i));
						if (node.properties != null) {
							if (node.properties.hasOwnProperty(propertyItemRenderer.label)) {
								PropertyDescriptor(propertyItemRenderer.data).value = node.properties[propertyItemRenderer.label];
							}
						}
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:HGroup id = "iconAndLabel" paddingLeft="5">
		<s:Image id="icon" height="100%"/>
		<s:Label id="label" height ="100%" verticalAlign="middle"/>	
	</s:HGroup>
	
	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" height="100%">			
			<s:Form id="propertyForm" width="100%" height="100%" >
			</s:Form>
		</s:Group>
	</s:Scroller>
</s:Group>
