<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 height="182" creationComplete="creationCompleteHandler(event)"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, mx.managers.IFocusManagerComponent">
	<s:layout>
		<s:VerticalLayout useVirtualLayout="true"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.mindmap.Diagram;
			import org.flowerplatform.flex_client.core.mindmap.remote.Node;
			import org.flowerplatform.flex_client.properties.remote.Property;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.selection.ISelectionForServerProvider;
			import org.flowerplatform.flexutil.selection.ISelectionProvider;
			import org.flowerplatform.flexutil.selection.SelectionChangedEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			protected var _viewHost:IViewHost;
			
			protected function creationCompleteHandler(flexvent:FlexEvent):void {				
				propertyList.itemRenderer = new ClassFactory(PropertyItemRenderer);
				propertyList.dataProvider = new ArrayList();
				// get selection from active provider to populate properties list with data
				var activeSelectionProvider:ISelectionProvider = FlexUtilGlobals.getInstance().selectionManager.activeSelectionProvider;
				if (activeSelectionProvider != null) {
					// create dummy event
					var event:SelectionChangedEvent = new SelectionChangedEvent();
					event.selection = activeSelectionProvider.getSelection();
					
					selectionChangedHandler(event);
				}
				// listen for selection changes
				FlexUtilGlobals.getInstance().selectionManager.addEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
				IEventDispatcher( _viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);
			}
			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {
				FlexUtilGlobals.getInstance().selectionManager.removeEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
			}
						
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
						
			private function selectionChangedHandler(event:SelectionChangedEvent):void {
				// I did this, because the selection system, sends an empty selection when the diagram is opened
				// so in case the event.selectionForServer is an empty array we stop the logic.								
				if (event.selection == null || event.selection.length == 0 || event.selection.getItemAt(0) is Diagram) {
					icon.source = null;
					label.text = null;
					IList(propertyList.dataProvider).removeAll();
					return;
				}	
				
				var node:Node = Node(event.selection.getItemAt(0));
				CorePlugin.getInstance().serviceLocator.invoke(
					"mindMapService", "getPropertiesData", [node.type], 
					function(result:ResultEvent):void {
						var properties:ArrayCollection = ArrayCollection(result.result);
						for each (var property:Property in properties) {
							if (node.properties != null && node.properties.hasOwnProperty(property.name)) {
								property.value = node.properties[property.name];
							}
						}
						propertyList.dataProvider = properties;		
						label.text = node.body;
						PropertiesPlugin.getInstance().currentSelection = event.selection;
					}
				);		
			}
			
		]]>
	</fx:Script>
	<s:HGroup id = "iconAndLabel" paddingLeft="5">
		<s:Image id="icon" height="100%"/>
		<s:Label id="label" height ="100%" verticalAlign="middle"/>	
	</s:HGroup>

	<s:List id="propertyList" width="100%" height="100%">

	</s:List>
</s:Group>
