<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2014 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!---
@author Sebastian Solomon
-->
<host:BasicViewContent xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:host="org.flowerplatform.flexutil.view_content_host.*">
		
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import org.flowerplatform.flex_client.core.CoreConstants;
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.properties.PropertiesConstants;
			import org.flowerplatform.flex_client.properties.property_line_renderer.PropertyLineRenderer;
			import org.flowerplatform.flex_client.properties.remote.PropertyDescriptor;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexdiagram.ControllerUtils;
			import org.flowerplatform.flexdiagram.DiagramShellContext;
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			
			public static const SHOW_ALL:String = "showAll";
			public static const SHOW_ONLY_CONTRIBUTES_TO_CREATION:String = "showOnlyContributingToCreation"; // mandatory & optional
			public static const SHOW_ONLY_MANDATORY:String = "showOnlyMandatory";
			
			public var nodeType:String;
			
			public var parentNode:Node;
			
			public var option:String = SHOW_ONLY_CONTRIBUTES_TO_CREATION;
			
			public var diagramShellContext:DiagramShellContext;
			
			public var siblingNodeUri:String;
						
			override protected function creationCompleteHandler(event:FlexEvent):void {
				super.creationCompleteHandler(event);
				
				var propertyDescriptors:IList = CorePlugin.getInstance().nodeTypeDescriptorRegistry.getExpectedTypeDescriptor(nodeType).getAdditiveControllers(PropertiesConstants.PROPERTY_DESCRIPTOR, null);
				var currentCategory:String = "";
				for ( var i:int = 0; i < propertyDescriptors.length; i++) {
					var propertyDescriptor:PropertyDescriptor = PropertyDescriptor(propertyDescriptors.getItemAt(i));
					switch(option) {
						case SHOW_ALL:
							addFormItem(propertyDescriptor, currentCategory);
							break;
						case SHOW_ONLY_CONTRIBUTES_TO_CREATION:
							if (propertyDescriptor.contributesToCreation) {
								addFormItem(propertyDescriptor, currentCategory);
							}
							break;
						case SHOW_ONLY_MANDATORY:
						default:
							if (propertyDescriptor.contributesToCreation && propertyDescriptor.mandatory) {
								addFormItem(propertyDescriptor, currentCategory);
							}
							break;
					}
				}
			
				tmpLabel.visible = tmpLabel.includeInLayout = nodeType == CoreConstants.FILE_NODE_TYPE;
				tmpLabel.textFlow = TextConverter.importToFlow(Resources.getMessage('mindmap.create.note'), TextConverter.TEXT_FIELD_HTML_FORMAT);
			}
			
			private function addFormItem(propertyDescriptor:PropertyDescriptor, currentCategory:String):void {
				var propertyRenderer:PropertyLineRenderer = new PropertyLineRenderer();
				propertyRenderer.propertyDescriptor = propertyDescriptor;
				propertyRenderer.savePropertyEnabled = false;		
				propertyForm.addElement(propertyRenderer);
				if (propertyDescriptor.contributesToCreation) {
					propertyDescriptor.readOnly = false;
				}				
			}
						
			override protected function okHandler(evt:Event = null):void {
				var propertiesToSetAfterAddingNode:ArrayList = new ArrayList();
				var context:Object = new Object();
				context["type"] = nodeType;
				context[CoreConstants.INSERT_BEFORE_FULL_NODE_ID] = siblingNodeUri;
				
				for (var i:int = 0; i < propertyForm.numElements; i++) {
					if (propertyForm.getElementAt(i) is PropertyLineRenderer) {
						var propertyItemRenderer:PropertyLineRenderer = PropertyLineRenderer(propertyForm.getElementAt(i));
						if (propertyItemRenderer.propertyDescriptor.mandatory && (propertyItemRenderer.value == null || propertyItemRenderer.value == "") && propertyItemRenderer.propertyDescriptor.type != "Boolean") {
							FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
								.setText(Resources.getMessage("field_required_title"))
								.setTitle("\'" + propertyItemRenderer.propertyDescriptor[CoreConstants.NAME] + "\' " + Resources.getMessage("field_is_mandatory_message"))
								.setWidth(300)
								.setHeight(200)
								.showMessageBox();
							return;
						}
						if (propertyItemRenderer.propertyDescriptor.contributesToCreation) {
							context[propertyItemRenderer.propertyDescriptor[CoreConstants.NAME]] = propertyItemRenderer.value;
						} else {
							if (propertyItemRenderer.value != null && propertyItemRenderer.value != "") {
								propertiesToSetAfterAddingNode.addItem(propertyItemRenderer);
							}
						}
					}
				}
				
				CorePlugin.getInstance().serviceLocator.invoke("nodeService.addChild", [parentNode.nodeUri, context], 
					function(childFullNodeId:String):void {
						// setProperty for properties that don't contribute to creation.
						for (var i:int=0; i < propertiesToSetAfterAddingNode.length; i++) {
							var propertyItemRenderer:PropertyLineRenderer = PropertyLineRenderer(propertiesToSetAfterAddingNode.getItemAt(i));
							CorePlugin.getInstance().serviceLocator.invoke("nodeService.setProperty", [childFullNodeId, propertyItemRenderer.propertyDescriptor.name, propertyItemRenderer.value], null);
						}
						cancelHandler();
						
						// fileSystem don't have isDirectory property
						if (parentNode.properties.hasOwnProperty(CoreConstants.FILE_IS_DIRECTORY) && !parentNode.properties[CoreConstants.FILE_IS_DIRECTORY]) {
							parentNode = parentNode.parent;
						}
						// expand parentNode, select the added child.
						if (!ControllerUtils.getMindMapModelController(diagramShellContext, parentNode).getExpanded(diagramShellContext, parentNode)) {
							diagramShellContext[CoreConstants.HANDLER] = function():void {CorePlugin.getInstance().selectNode(diagramShellContext, childFullNodeId);};
							MindMapDiagramShell(diagramShellContext.diagramShell).getModelController(diagramShellContext, parentNode).setExpanded(diagramShellContext, parentNode, true);
						}else {
							CorePlugin.getInstance().selectNode(diagramShellContext, childFullNodeId);
						}
					});		
			}
			
		]]>
	</fx:Script>
	
	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" height="100%">			
			<s:Form id="propertyForm" width="100%" height="100%">
			</s:Form>
		</s:Group>
	</s:Scroller>
	
	<!-- TODO MG: remove after the custom UI logic is implemented -->
	<s:RichText id="tmpLabel" paddingTop="10" />
	
</host:BasicViewContent>
