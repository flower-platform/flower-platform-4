<?xml version="1.0" encoding="utf-8"?>
<!---
@author Sebastian Solomon
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="creationCompleteHandler(event)"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, mx.managers.IFocusManagerComponent">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.IFocusManagerComponent;
			import mx.utils.ObjectUtil;
			
			import spark.components.FormItem;
			import spark.components.Label;
			
			import org.apache.flex.collections.ArrayList;
			import org.flowerplatform.flex_client.core.CoreConstants;
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.core.node.remote.ServiceContext;
			import org.flowerplatform.flex_client.properties.property_renderer.BasicPropertyRenderer;
			import org.flowerplatform.flex_client.properties.property_renderer.CategoryPropertyRenderer;
			import org.flowerplatform.flex_client.properties.remote.PropertyDescriptor;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexdiagram.ControllerUtils;
			import org.flowerplatform.flexdiagram.DiagramShellContext;
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexutil.FlexUtilAssets;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			public static const SHOW_ALL:String = "showAll";
			public static const SHOW_ONLY_CONTRIBUTES_TO_CREATION:String = "showOnlyContributingToCreation"; // mandatory & optional
			public static const SHOW_ONLY_MANDATORY:String = "showOnlyMandatory";
			
			public var nodeType:String;
			
			public var parentNode:Node;
			
			public var option:String = SHOW_ONLY_CONTRIBUTES_TO_CREATION;
			
			public var diagramShellContext:DiagramShellContext;
			
			protected var _viewHost:IViewHost;
			
			protected function creationCompleteHandler(flexvent:FlexEvent):void {				
				var propertyDescriptors:IList = CorePlugin.getInstance().nodeTypeDescriptorRegistry
					.getExpectedTypeDescriptor(nodeType).getAdditiveControllers("propertyDescriptor", null);
				var currentCategory:String = "";
				for ( var i:int = 0; i < propertyDescriptors.length; i++) {
					var propertyDescriptor:PropertyDescriptor = PropertyDescriptor(ObjectUtil.copy(propertyDescriptors.getItemAt(i)));
					switch(option) {
						case SHOW_ALL:
							addFormItem(propertyDescriptor, currentCategory);
							break;
						case SHOW_ONLY_CONTRIBUTES_TO_CREATION:
							if (propertyDescriptor.contributesToCreation) {
								addFormItem(propertyDescriptor, currentCategory);
							}
							break;
						case SHOW_ONLY_MANDATORY:
						default:
							if (propertyDescriptor.contributesToCreation && propertyDescriptor.mandatory) {
								addFormItem(propertyDescriptor, currentCategory);
							}
							break;
					}
				}
				
				// TODO MG: remove after the custom UI logic is implemented
				if (nodeType == CoreConstants.FILE_NODE_TYPE) {
					var label:Label = new Label();
					label.text = "Please append the .mm extension to add a MindMap file.";
					propertyForm.addElement(label);
				}
				focusManager.setFocus(BasicPropertyRenderer(FormItem(propertyForm.getElementAt(0)).getElementAt(0)).getElementAt(0) as IFocusManagerComponent);			
			}
			
			private function addFormItem(propertyDescriptor:PropertyDescriptor, currentCategory:String):void {
				var propertyRenderer:PropertyItemRenderer = new PropertyItemRenderer();
				propertyRenderer.basicPropertyRendererType = propertyDescriptor.type;
				propertyRenderer.savePropertyEnabled = false;
				var itemCategory:String = propertyDescriptor.category;
				if (itemCategory != currentCategory) {
					var categoryItem:CategoryPropertyRenderer = new CategoryPropertyRenderer();
					currentCategory = itemCategory;
					categoryItem.label = currentCategory;
					propertyForm.addElement(categoryItem);
				}
				propertyForm.addElement(propertyRenderer);
				if (propertyDescriptor.contributesToCreation) {
					propertyDescriptor.readOnly = false;
				}				
				propertyRenderer.data = propertyDescriptor;
			}
			
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
				_viewHost.setIcon(Resources.addIcon);
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
			
			protected function okHandler(evt:MouseEvent = null):void {
				var propertiesToSetAfterAddingNode:ArrayList = new ArrayList();
				var context:ServiceContext = new ServiceContext();
				context.add("type", nodeType);
				for (var i:int = 0; i < propertyForm.numElements; i++) {
					if (propertyForm.getElementAt(i) is PropertyItemRenderer) {
						var propertyItemRenderer:PropertyItemRenderer = PropertyItemRenderer(propertyForm.getElementAt(i));
						if (PropertyDescriptor(propertyItemRenderer.data).mandatory && propertyItemRenderer.data.value == "" && propertyItemRenderer.data.type != "Boolean") {
							FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
								.setText(Resources.getMessage("field_required_title"))
								.setTitle("\'" + propertyItemRenderer.data[CoreConstants.NAME] + "\' " + Resources.getMessage("field_is_mandatory_message"))
								.setWidth(300)
								.setHeight(200)
								.showMessageBox();
							return;
						}
						if (PropertyDescriptor(propertyItemRenderer.data).contributesToCreation) {
							context.add(propertyItemRenderer.data[CoreConstants.NAME], propertyItemRenderer.data.value);
						} else {
							if (propertyItemRenderer.data.value != null && propertyItemRenderer.data.value != "") {
								propertiesToSetAfterAddingNode.addItem(propertyItemRenderer.data);
							}
						}
					}
				}
				
				CorePlugin.getInstance().serviceLocator.invoke("nodeService.addChild", [parentNode.nodeUri, context], 
					function(childFullNodeId:String):void {
						// setProperty for properties that don't contribute to creation.
						for (var i:int=0; i < propertiesToSetAfterAddingNode.length; i++) {
							var propDescriptor:PropertyDescriptor = PropertyDescriptor(propertiesToSetAfterAddingNode.getItemAt(i));
							CorePlugin.getInstance().serviceLocator.invoke("nodeService.setProperty", [childFullNodeId, propDescriptor.name, propDescriptor.value], null);
						}
						cancelHandler();
						
						// fileSystem don't have isDirectory property
						if (parentNode.properties.hasOwnProperty(CoreConstants.FILE_IS_DIRECTORY) && !parentNode.properties[CoreConstants.FILE_IS_DIRECTORY]) {
							parentNode = parentNode.parent;
						}
						// expand parentNode, select the added child.
						if (!ControllerUtils.getMindMapModelController(diagramShellContext, parentNode).getExpanded(diagramShellContext, parentNode)) {
							diagramShellContext[CoreConstants.HANDLER] = function():void {CorePlugin.getInstance().selectNode(diagramShellContext, childFullNodeId);};
							MindMapDiagramShell(diagramShellContext.diagramShell).getModelController(diagramShellContext, parentNode).setExpanded(diagramShellContext, parentNode, true);
						}else {
							CorePlugin.getInstance().selectNode(diagramShellContext, childFullNodeId);
						}
					});		
			}
			
			protected function cancelHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
			
		]]>
	</fx:Script>

	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" height="100%">			
			<s:Form id="propertyForm" width="100%" height="100%">
			</s:Form>
		</s:Group>
	</s:Scroller>
	<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle">
		<s:Button id="okButton" label="{FlexUtilAssets.INSTANCE.getMessage('dialog.ok')}" click="okHandler(event)"/>
		<s:Button id="cancelButton" label="{FlexUtilAssets.INSTANCE.getMessage('dialog.cancel')}" click="cancelHandler()"/>
	</s:HGroup>
</s:Group>
