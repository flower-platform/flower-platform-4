<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!---
@author Sebastian Solomon
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:local="org.flowerplatform.flex_client.mindmap.ui.*"
		 width="100%">
	
	<fx:Metadata>
		[Event(name="noIcons",type="flash.events.Event")]
		
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import spark.components.Group;
			import spark.components.supportClasses.StyleableTextField;
			
			import org.flowerplatform.flex_client.core.CorePlugin;
			import org.flowerplatform.flex_client.mindmap.MindMapConstants;
			import org.flowerplatform.flex_client.mindmap.renderer.MindMapButtonWithIcon;
			import org.flowerplatform.flex_client.resources.Resources;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.Utils;
			
					
			public var icons:String;
			
			[SkinPart(required="true")]
			[Bindable]  
			public var imageGroup:Group;
			
			[SkinPart(required="true")]
			[Bindable]
			public var removeGroup:Group;
			
			[Bindable]
			public var repoPath:String;
			
			[Bindable]
			public var showOnlyRepositoryCustomIcons:Boolean = false;
			
			/**
			 * @author Cristina Constantinescu
			 * @author Sebastian Solomon
			 */
			override protected function createChildren():void {
				super.createChildren();
			}
			
			/**
			 * Method that fetches a list of custom icons paths in the user repository. 
			 * @author Alina Bratu
			 */
			
			private function getCustomIcons():void {
				CorePlugin.getInstance().serviceLocator.invoke("mindMapService.getRepositoryCustomIcons",[Resources.getMessage("mindmap.custom_icons.path",[repoPath])],getCustomIconsResultHandler);
			}
			/**
			 * Gets the list of custom icons paths and, if <code>showOnlyRepositoryCustomIcons</code>
			 * is false, gets also the list of default icons names. Calls  <code>addIcons</code> method 
			 * which displays them.
			 * @author Alina Bratu
			 */
			private function getCustomIconsResultHandler(list:String):void {
				if (list != null) {
					addIcons(list.split(';'),true);
				}
				if (!showOnlyRepositoryCustomIcons) {
					addIcons(MindMapConstants.ICONS_LIST.split(';'),false);
				}
				else {
					if (list == null) {
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
							.setTitle(Resources.getMessage("mindmap.custom_icons.noIcons.title"))
							.setText(Resources.getMessage("mindmap.custom_icons.noIcons"))
							.setWidth(450)
							.setHeight(150)
							.setWordWrap(false)
							.showMessageBox();
						var ev:Event = new Event("noIcons");
						dispatchEvent(ev);
					}
				}
			}
			
			/**
			 * Adds child icons to the view based on the relative paths provided in <code>icons</code>.
			 * @author Alina Bratu
			 */
			protected function addIcons(icons:Array, areCustomIcons:Boolean):void {
				for (var i:int=0; i < icons.length; i++) {
					var btnImage:MindMapButtonWithIcon = new MindMapButtonWithIcon();
					if (areCustomIcons) {
						btnImage.iconUrl = icons[i];
						btnImage.setStyle("icon", CorePlugin.getInstance().getCustomResourceUrl(icons[i]));
					}
					else {
						btnImage.iconUrl = "images/mindmap/icons/" + icons[i] + ".png";
						btnImage.setStyle("icon", Resources.mindmapIcons[icons[i]]);
					}
					
					btnImage.addEventListener(MouseEvent.CLICK, btnImage_clickHandler);
					
					imageGroup.addElement(btnImage);
				}
			}
					
			override protected function partAdded(partName:String, instance:Object):void {
				super.partAdded(partName, instance);
				if (partName == "removeGroup") {
					var btnRemoveAll:MindMapButtonWithIcon = new MindMapButtonWithIcon();
					btnRemoveAll.setStyle("icon", Resources.removeAllIconsIcon);
					btnRemoveAll.toolTip = Resources.getMessage('manageIcons.remove.all.label');
					btnRemoveAll.addEventListener(MouseEvent.CLICK, btnRemoveAll_clickHandler);
					
					var btnRemoveFirst:MindMapButtonWithIcon = new MindMapButtonWithIcon();
					btnRemoveFirst.setStyle("icon", Resources.removeFirstIconIcon);
					btnRemoveFirst.toolTip = Resources.getMessage('manageIcons.remove.first.label');
					btnRemoveFirst.addEventListener(MouseEvent.CLICK, btnRemoveFirst_clickHandler);
					
					var btnRemoveLast:MindMapButtonWithIcon = new MindMapButtonWithIcon();
					btnRemoveLast.setStyle("icon", Resources.removeLastIconIcon);
					btnRemoveLast.toolTip = Resources.getMessage('manageIcons.remove.last.label');
					btnRemoveLast.addEventListener(MouseEvent.CLICK, btnRemoveLast_clickHandler);
					
					removeGroup.addElement(btnRemoveAll);				
					removeGroup.addElement(btnRemoveFirst);				
					removeGroup.addElement(btnRemoveLast);
				}
				
				if (partName == "imageGroup") {
					getCustomIcons();			
				}
				
				if (partName == "contentGroup") {
					var message:StyleableTextField = new StyleableTextField();
					message.text = Resources.getMessage("resource.icon.custom");
					message.width = 250;
					message.wordWrap = true;
					contentGroup.addElement(message);
				}
			}
										
			protected function btnRemoveAll_clickHandler(event:MouseEvent):void {
				var result:Object = new Object();
				result.type = Utils.REMOVE_ALL;
				handleClick(result);
			}
			
			protected function btnRemoveFirst_clickHandler(event:MouseEvent):void {
				var result:Object = new Object();
				result.type = Utils.REMOVE_FIRST;
				handleClick(result);
			}
			
			protected function btnRemoveLast_clickHandler(event:MouseEvent):void {
				var result:Object = new Object();
				result.type = Utils.REMOVE_LAST;
				handleClick(result);
			}
			
			protected function btnImage_clickHandler(event:MouseEvent):void {
				var result:Object = new Object();
				result.type = Utils.ADD;
				var iconUrl:String = MindMapButtonWithIcon(event.target).iconUrl;
				if (iconUrl.indexOf("mindmap_icons") != -1) {
					result.iconUrl = CorePlugin.getInstance().getCustomResourceUrl(iconUrl);
				}
				else {
					result.iconUrl = Resources.getResourceUrl(iconUrl);
				}
				handleClick(result);
			}
			
			protected function handleClick(result:Object):void {
			}
							
		]]>
	</fx:Script>
	
</s:SkinnableContainer>