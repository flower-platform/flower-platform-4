<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2014 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<mindmap:AbstractMindMapModelRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
									  xmlns:s="library://ns.adobe.com/flex/spark" 
									  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:mindmap="org.flowerplatform.flexdiagram.mindmap.*" xmlns:focus="org.flowerplatform.flexutil.focusable_component.*">
	<fx:Script>
		<![CDATA[
			import mx.core.DPIClassification;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			import mx.utils.ObjectUtil;
			
			import spark.core.SpriteVisualElement;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import org.flowerplatform.flex_client.core.CoreConstants;
			import org.flowerplatform.flex_client.core.editor.remote.Node;
			import org.flowerplatform.flex_client.core.node.controller.GenericValueProviderFromDescriptor;
			import org.flowerplatform.flex_client.core.node.controller.NodeControllerUtils;
			import org.flowerplatform.flex_client.mindmap.MindMapEditorDiagramShell;
			import org.flowerplatform.flexdiagram.ControllerUtils;
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexdiagram.renderer.DiagramRenderer;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.FlowerArrayList;
			import org.flowerplatform.flexutil.Utils;
			
			[Bindable]
			public var circleRadius:int = 10;
				
			/**
			 * Custom <code>hitArea</code> for this renderer.
			 * Consists of two areas:
			 * <ul>
			 * 	<li> node bounds rectangle
			 *  <li> circle area (seen as a rectangle)
			 * </ul>
			 * Needed when adding/removing <code>circle</code> element from renderer at mouse over/out.
			 */ 
			private var rendererHitArea:SpriteVisualElement;
					
			override protected function initializeHandler(event:FlexEvent):void {
				super.initializeHandler(event);
				
				if (FlexUtilGlobals.getInstance().isMobile) {
					addEventListener(MouseEvent.CLICK, mouseClickHandler);
				}
				circle.addEventListener(MouseEvent.MOUSE_UP, circle_mouseUpHandler, false, 5000);
				
				if (FlexUtilGlobals.getInstance().isMobile) {
					switch (FlexGlobals.topLevelApplication.applicationDPI) {
						case DPIClassification.DPI_320:	{
							circleRadius = 40;
							break;
						}
						case DPIClassification.DPI_240:	{
							circleRadius = 30;
							break;
						}
						default: {
							// default PPI160
							circleRadius = 20;
							break;
						}
					}
				}
				
				getMainComponent().addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
				getMainComponent().addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
			}
			
			protected function get node():Node {
				return Node(data);	
			}
			
			protected function get mindMapDiagramShell():MindMapEditorDiagramShell {
				return MindMapEditorDiagramShell(diagramShellContext.diagramShell);	
			}
			
			override protected function assignData():void {
				x = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "x");	
				y = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "y");
				
				var classInfoProperties:Array = ObjectUtil.getClassInfo(node.properties).properties as Array;
				for each (var property:String in classInfoProperties) {
					modelChangedHandler(PropertyChangeEvent.createUpdateEvent(node, property, NaN, node.properties[property]));
				}				
			}
			
			override protected function unassignData():void {
				labelDisplay.text = "";
				icons = null;
				
				// Important: measuredHeight/measuredWidth are reset to their default values; otherwise the renderer will use recycled values for width/height 
				getMainComponent().measuredWidth = 0;
				getMainComponent().measuredHeight = 0;
			}
			
			
			override protected function resizeHandler(event:ResizeEvent):void {
				if (height == 0 || width == 0) {
					// don't change values if first resize, wait until component fully initialized
					return;
				}
				var refresh:Boolean = false;
				if (mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "width") != width) {
					mindMapDiagramShell.setPropertyValue(diagramShellContext, data, "width", width);
					refresh = true;
				}
				if (mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "height") != height) {			
					mindMapDiagramShell.setPropertyValue(diagramShellContext, data, "height", height);
					refresh = true;
				}
				
				if (refresh) {					
					mindMapDiagramShell.shouldRefreshModelPositions(diagramShellContext, mindMapDiagramShell.rootModel);
					mindMapDiagramShell.shouldRefreshVisualChildren(diagramShellContext, mindMapDiagramShell.rootModel);
				}
			}						
			
			override protected function modelChangedHandler(event:PropertyChangeEvent):void {
				var titleProvider:GenericValueProviderFromDescriptor = NodeControllerUtils.getTitleProvider(mindMapDiagramShell.registry, node);
				var titleProperty:String = titleProvider.getPropertyNameFromGenericDescriptor(node);
				
				var iconsProvider:GenericValueProviderFromDescriptor =  NodeControllerUtils.getIconsProvider(mindMapDiagramShell.registry, node);
				var iconsProperty:String = iconsProvider.getPropertyNameFromGenericDescriptor(node);
				
				switch (event.property) {
					case titleProperty:
						var title:String = String(titleProvider.getValue(node));
						title = Utils.getCompatibleHTMLText(title);
						// if text contains html tag, display it as html, otherwise plain text
						labelDisplay.textFlow = TextConverter.importToFlow(title , Utils.isHTMLText(title) ? TextConverter.TEXT_FIELD_HTML_FORMAT : TextConverter.PLAIN_TEXT_FORMAT); 
						invalidateSize();
						invalidateDisplayList();
						break;
					case iconsProperty:
						var iconsValue:String = iconsProvider.getValue(node) as String;
						if (iconsValue != null) {
							icons = new FlowerArrayList(iconsValue.split(Utils.ICONS_SEPARATOR));
						} else {
							icons = null;
						}
						break
					case "x":
						x = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "x");	
						break;
					case "y":
						y = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "y");	
						break;
					case "depth":
						depth = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "depth");				
						break;
					case CoreConstants.HAS_CHILDREN:
						invalidateSize();
					case "children":
						invalidateDisplayList();
				}
			}	
						
			override public function set data(value:Object):void {
				if (node != null) {		
					node.properties.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
					if (circle.parent != null) {
						DiagramRenderer(mindMapDiagramShell.diagramRenderer).removeElement(circle);					
					}
				}
				
				super.data = value;
				
				if (node != null) {
					node.properties.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);				
				}
			}
			
			override protected function createChildren():void {			
				super.createChildren();
				
				rendererHitArea = new SpriteVisualElement();				
				rendererHitArea.mouseEnabled = false;
				addElementAt(rendererHitArea, 0);				
			}
						
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				setHitArea(unscaledWidth, unscaledHeight);				
			}	
			
			/**
			 * @author Cristina Constantinescu
			 * @author Solomon Sebastian
			 */
			protected function setHitArea(unscaledWidth:Number, unscaledHeight:Number):void {
				var paddingLeft:Number = 2;
				var paddingTop:Number = 2;
				
				rendererHitArea.graphics.clear();				
				rendererHitArea.graphics.beginFill(0xFF0000, 0);
				rendererHitArea.graphics.drawRect(-paddingLeft, -paddingTop, unscaledWidth, unscaledHeight);	
				if (circle.parent != null) {	
					var dynamicObject:Object = mindMapDiagramShell.getDynamicObject(diagramShellContext, node);
					var side:int = mindMapDiagramShell.getModelController(diagramShellContext, node).getSide(diagramShellContext, node);
					
					vLine.visible = !mindMapDiagramShell.getModelController(diagramShellContext, node).getExpanded(diagramShellContext, node);	
					if (side == MindMapDiagramShell.POSITION_LEFT) {
						circle.x = dynamicObject.x - circleRadius * 2;						
						circle.y = dynamicObject.y + unscaledHeight / 2 - circleRadius;
						rendererHitArea.graphics.drawRect(-circleRadius * 2 - paddingLeft, -paddingTop, circleRadius * 2, unscaledHeight);
					} else if (side == MindMapDiagramShell.POSITION_RIGHT) {
						circle.x = dynamicObject.x + dynamicObject.width;
						circle.y = dynamicObject.y + unscaledHeight / 2 - circleRadius;
						rendererHitArea.graphics.drawRect(dynamicObject.width - paddingLeft , -paddingTop, circleRadius * 2, unscaledHeight);
					}
				}
				
				rendererHitArea.graphics.endFill();
				hitArea = rendererHitArea;
			}
						
			override protected function canDrawCircle():Boolean {			
				return node != null 
					&& node.properties.hasOwnProperty(CoreConstants.HAS_CHILDREN)
					&& Boolean(node.properties[CoreConstants.HAS_CHILDREN]).valueOf() 
					&& !mindMapDiagramShell.getModelController(diagramShellContext, node).getExpanded(diagramShellContext, node);
			}
			
			protected function mouseClickHandler(event:MouseEvent):void {
				mouseOverHandler(event);
			}
			
			protected function mouseOverHandler(event:MouseEvent):void {
				if (circle.parent == null) {
					if (node.properties != null && Boolean(node.properties[CoreConstants.HAS_CHILDREN]).valueOf() &&
						ControllerUtils.getModelChildrenController(diagramShellContext, node).getParent(diagramShellContext, node) != null) {	
						DiagramRenderer(mindMapDiagramShell.diagramRenderer).addElement(circle);						
						invalidateDisplayList();
					}
				}
			}
			
			protected function mouseOutHandler(event:MouseEvent):void {				
				if (circle.parent != null) {
					DiagramRenderer(diagramShellContext.diagramShell.diagramRenderer).removeElement(circle);
					invalidateDisplayList();
				}				
			}
			
			protected function circle_mouseUpHandler(event:MouseEvent):void {
				mindMapDiagramShell.getModelController(diagramShellContext, node).setExpanded(diagramShellContext, node, !mindMapDiagramShell.getModelController(diagramShellContext, node).getExpanded(diagramShellContext, node));
				
				event.preventDefault();
				event.stopImmediatePropagation();
			}
			
			protected function circle_mouseDownUpHandler(event:MouseEvent):void {
				event.preventDefault();
				event.stopImmediatePropagation();
				
				dispatchEvent(event);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Group id="circle"				
				 mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"
				 mouseDown="circle_mouseDownUpHandler(event)" mouseUp="circle_mouseDownUpHandler(event)"
				 width="{circleRadius * 2}" height="{circleRadius * 2}" depth="{int.MAX_VALUE}">		
			<s:layout>				
				<s:BasicLayout />
			</s:layout>				
			<s:Ellipse id="ellipse" width="100%" height="100%" >				
				<s:stroke>
					<s:SolidColorStroke color="#808080" weight="1" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="white" />
				</s:fill>			
			</s:Ellipse>
			<s:Line id="hLine" yFrom="{circleRadius -1/2}"  xFrom="{circleRadius/2}" yTo="{circleRadius -1/2}" xTo="{circleRadius * 2 - circleRadius/2}">
				<s:stroke>
					<s:SolidColorStroke color="#808080" weight="1" />
				</s:stroke>
			</s:Line>
			<s:Line id="vLine" xFrom="{circleRadius - 1/2}"  yFrom="{circleRadius/2}" xTo="{circleRadius - 1/2}" yTo="{circleRadius * 2 - circleRadius/2}">
				<s:stroke>
					<s:SolidColorStroke color="#808080" weight="1" />
				</s:stroke>
			</s:Line>
		</s:Group>		
	</fx:Declarations>
	
</mindmap:AbstractMindMapModelRenderer>
