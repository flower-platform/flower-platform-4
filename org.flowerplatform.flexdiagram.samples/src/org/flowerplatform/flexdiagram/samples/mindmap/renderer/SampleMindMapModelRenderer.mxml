<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!---
	@author Cristina Constantinescu
-->
<s:IconItemRenderer								
				xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 				
				xmlns:model="org.flowerplatform.flexdiagram.samples.mindmap.model.*"
				implements="org.flowerplatform.flexdiagram.IDiagramShellContextAware"
				creationComplete="creationCompleteHandler(event)" initialize="initializeHandler(event)"
				paddingTop="2" paddingBottom="2" paddingLeft="2" paddingRight="2"
				verticalAlign="middle">
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			
			import org.flowerplatform.flexdiagram.ControllerUtils;
			import org.flowerplatform.flexdiagram.DiagramShellContext;
			import org.flowerplatform.flexdiagram.controller.model_extra_info.DynamicModelExtraInfoController;
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexdiagram.samples.mindmap.model.SampleMindMapModel;

			private static const circleRadius:int = 3;
								
			
			protected var _context:DiagramShellContext;
			
			public function get diagramShellContext():DiagramShellContext {			
				return _context;
			}
			
			public function set diagramShellContext(value:DiagramShellContext):void {
				this._context = value;
			}	
			
			private function get node():SampleMindMapModel {
				return SampleMindMapModel(data);
			}
						
			override public function set data(value:Object):void {
				if (super.data != null) {
					data.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);						
				}
				super.data = value;
			
				if (data != null) {
					data.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);					
					x = getDynamicObject(node).x;
					y = getDynamicObject(node).y;	
					label = node.text;
				}
			}
					
			protected function creationCompleteHandler(event:FlexEvent):void {
				BindingUtils.bindSetter(resizeHandler, this, "width"); 
				BindingUtils.bindSetter(resizeHandler, this, "height"); 				
			}	
			
			private function modelChangedHandler(event:PropertyChangeEvent):void {
				switch (event.property) {
					case "x":
						x = getDynamicObject(node).x;						
						break;
					case "y":
						y = getDynamicObject(node).y;						
						break;
					case "text":
						label = data.text;
//						SampleMindMapModelController(IMindMapControllerProvider(diagramShell.getControllerProvider(data)).getMindMapModelController(data)).updateModelHandler(data);
						break;
					case "parent":						
					case "expanded":	
					case "hasChildren":	
						invalidateDisplayList();			
						var selectionRenderer:UIComponent = UIComponent(DynamicModelExtraInfoController(ControllerUtils.getModelExtraInfoController(diagramShellContext, data)).getDynamicObject(diagramShellContext, data).selectionRenderer);
						if (selectionRenderer != null) {
							selectionRenderer.invalidateDisplayList();
						}
						break;
				}			
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {			
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				graphics.clear();
				graphics.lineStyle(1, 0x808080);
				graphics.beginFill(0xCCCCCC, 0);
				graphics.drawRoundRect(0, 0, unscaledWidth, unscaledHeight, 10, 10);		
				
				if (node != null && node.hasChildren && node.expanded == false) {
					if (node.side == MindMapDiagramShell.POSITION_LEFT) {
						graphics.drawCircle(-circleRadius, height/2, circleRadius);
					} else if (data.side == MindMapDiagramShell.POSITION_RIGHT) {						
						graphics.drawCircle(width + circleRadius, height/2, circleRadius);
					}
				}
			}
							
			private function getDynamicObject(model:Object):Object {
				return DynamicModelExtraInfoController(ControllerUtils.getModelExtraInfoController(diagramShellContext, model)).getDynamicObject(diagramShellContext, model);
			}
									
			private function resizeHandler(value:Number):void {
				if (data != null) {
					getDynamicObject(node).width = this.width;
					getDynamicObject(node).height = this.height;
				
					MindMapDiagramShell(diagramShellContext.diagramShell).shouldRefreshModelPositions(diagramShellContext, diagramShellContext.diagramShell.rootModel);
					MindMapDiagramShell(diagramShellContext.diagramShell).shouldRefreshVisualChildren(diagramShellContext, diagramShellContext.diagramShell.rootModel);
				}
			}
							
//			protected function doubleClickHandler(event:MouseEvent):void {
//				if (node != null && node.side == MindMapDiagramShell.NONE) {
//					return;
//				}
//				IMindMapControllerProvider(diagramShell.getControllerProvider(data)).getMindMapModelController(data).setExpanded(data, !node.expanded);
//			}
			
			override protected function drawBorder(unscaledWidth:Number, unscaledHeight:Number):void {				
			}
			
			override protected function drawBackground(unscaledWidth:Number, unscaledHeight:Number):void {			
			}			
			
			protected function initializeHandler(event:FlexEvent):void {
				minHeight = 22; // only for desktop version
			}
			
		]]>
	</fx:Script>
	
</s:IconItemRenderer>