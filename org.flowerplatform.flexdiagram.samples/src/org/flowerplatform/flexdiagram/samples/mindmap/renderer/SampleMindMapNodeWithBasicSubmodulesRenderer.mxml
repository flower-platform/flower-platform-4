<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

license-end
-->
<!---
@author Diana Balutoiu
-->
<s:DataRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 		xmlns:s="library://ns.adobe.com/flex/spark" 
		 		xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:mindmap="org.flowerplatform.flexdiagram.mindmap.*"
				implements="org.flowerplatform.flexdiagram.renderer.IVisualChildrenRefreshable,
				org.flowerplatform.flexdiagram.IDiagramShellContextAware"
				creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			
			import spark.layouts.VerticalLayout;
			
			import org.flowerplatform.flexdiagram.ControllerUtils;
			import org.flowerplatform.flexdiagram.DiagramShellContext;
			import org.flowerplatform.flexdiagram.controller.visual_children.VisualChildrenController;
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexdiagram.renderer.IVisualChildrenRefreshable;
			import org.flowerplatform.flexdiagram.samples.mindmap.model.SampleMindMapModel;
			
			
			
			
			
			private var _shouldRefreshVisualChildren:Boolean;
			protected var _context:DiagramShellContext;
			//protected var mindMapDiagramShell:MindMapDiagramShell = new MindMapDiagramShell();
			protected var visualChildrenController:VisualChildrenController;
			//public var abstractMindMapNodeRenderer:AbstractMindMapNodeRenderer = new AbstractMindMapNodeRenderer();;
			
			public function get shouldRefreshVisualChildren():Boolean {
				return _shouldRefreshVisualChildren;
			}
			
			public function set shouldRefreshVisualChildren(value:Boolean):void {
				_shouldRefreshVisualChildren = value;
			}
			
			public function get diagramShellContext():DiagramShellContext {			
				return _context;
			}
			
			public function set diagramShellContext(value:DiagramShellContext):void {
				this._context = value;
				if (!hasEventListener(ResizeEvent.RESIZE)) {
					addEventListener(ResizeEvent.RESIZE, resizeHandler);	
				}
			}	
			
			protected function get mindMapDiagramShell():MindMapDiagramShell {
				return diagramShellContext != null ? MindMapDiagramShell(diagramShellContext.diagramShell) : null;
			}
			
			protected function resizeHandler(event:ResizeEvent):void {
				if (height == 0 || width == 0) {
					// don't change values if first resize, wait until component fully initialized
					return;
				}
				var refresh:Boolean = false;
				if (mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "width") != width) {
					mindMapDiagramShell.setPropertyValue(diagramShellContext, data, "width", width);
					refresh = true;
				}
				if (mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "height") != height) {			
					mindMapDiagramShell.setPropertyValue(diagramShellContext, data, "height", height);
					refresh = true;
				}
				
				if (refresh) {					
					mindMapDiagramShell.shouldRefreshModelPositions(diagramShellContext, mindMapDiagramShell.rootModel);
					mindMapDiagramShell.shouldRefreshVisualChildren(diagramShellContext, mindMapDiagramShell.rootModel);
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				layout = new VerticalLayout();
				mindMapNode.text = dataConverted.text;
				mindMapNode.fontFamily = dataConverted.fontFamily;
				mindMapNode.fontSize = dataConverted.fontSize;
				mindMapNode.fontWeight = dataConverted.fontWeight;
				mindMapNode.fontStyle = dataConverted.fontStyle;
				mindMapNode.percentWidth = 100;
				
			}
			
			override protected function createChildren():void
			{
				// TODO Auto Generated method stub
				super.createChildren();
			}
			
			
			public function get dataConverted():SampleMindMapModel {
				return SampleMindMapModel(data);
			}
			
			protected function modelChangedHandler(event:PropertyChangeEvent):void {
				var mindMapDiagramShell:MindMapDiagramShell = this.mindMapDiagramShell;
				if (mindMapDiagramShell != null) {
					// i.e. used as a renderer in a mind map diagram
					if (event == null || event.property == "x") {
						x = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "x");	
					}
					if (event == null || event.property == "y") {
						y = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "y");	
					}
				}
			
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				if (visualChildrenController != null) {
					visualChildrenController.refreshVisualChildren(diagramShellContext, data);
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			override public function set data(value:Object):void {
				if (data != null) {
					endModelListen();
				}
				
				super.data = value;
				
				if (data != null) {
					beginModelListen();
				}
				
				if (data == null) {
					visualChildrenController = null;
				} else {
					visualChildrenController = ControllerUtils.getVisualChildrenController(diagramShellContext, data);
				}
			}
						
			protected function beginModelListen():void {
				data.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);	
				modelChangedHandler(null);
			}
			
			protected function endModelListen():void {
				data.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
			}
			
			
		]]>
	</fx:Script>
	
	<mindmap:AbstractMindMapNodeRenderer id="mindMapNode"/>
</s:DataRenderer>
