<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	license-end
-->
<!---
@author Alexandra Topoloaga
-->
<mindmap:AbstractMindMapNodeRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
									 xmlns:s="library://ns.adobe.com/flex/spark" 
									 xmlns:mx="library://ns.adobe.com/flex/mx" 
									 xmlns:mindmap="org.flowerplatform.flexdiagram.mindmap.*">
	
	<fx:Script>
		<![CDATA[
			import mx.events.PropertyChangeEvent;
			
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexdiagram.samples.mindmap.model.SampleMindMapModel;
			
			
			public static const DEFAULT_PATH:String = "../../org.flowerplatform.flexdiagram.samples/icons/";
			
			public function get dataConverted():SampleMindMapModel {
				return SampleMindMapModel(data);
			}
			
			override protected function modelChangedHandler(event:PropertyChangeEvent):void {
				
				var mindMapDiagramShell:MindMapDiagramShell = this.mindMapDiagramShell;
						
				if (mindMapDiagramShell != null && diagramShellContext != null) {
					// i.e. used as a renderer in a mind map diagram
					if (event == null || event.property == "x") {
						x = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "x");	
					}
					if (event == null || event.property == "y") {
						y = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "y");	
					}
					if (event == null || event.property == "depth") {
						depth = mindMapDiagramShell.getPropertyValue(diagramShellContext, data, "depth");	
					}
					if (event == null || event.property == "cloudColor") {
						cloudColor = dataConverted.cloudColor;
					}			
					if (event == null || event.property == "cloudType") {
						cloudType = dataConverted.cloudType;
					}
					if (event == null || event.property == "expandedWidth") {
						invalidateDisplayList();
					}
				}
				
				// else used as a renderer in a plain Flex component
				
				if (event == null || event.property == "fontFamily") {
					fontFamily = dataConverted.fontFamily;
				} 
				if (event == null || event.property == "fontSize") {
					fontSize = dataConverted.fontSize;
				} 
				if (event == null || event.property == "fontWeight") {
					fontWeight = dataConverted.fontWeight;
				} 
				if (event == null || event.property == "fontStyle") {
					fontStyle = dataConverted.fontStyle;
				}
				if (event == null || event.property == "text") {
					text = dataConverted.text;
				}
				if (event == null || event.property == "textColor") {
					textColor = dataConverted.textColor;
				}
				if (event == null || event.property == "background") {
					invalidateDisplayList();
					background = dataConverted.background;
				}
				if (event == null || event.property == "icons") {
					if (dataConverted.icons != null) {
						for (var i:int = 0; i < dataConverted.icons.length; i++) {
							if (dataConverted.icons.getItemAt(i).indexOf(DEFAULT_PATH) < 0) {
								dataConverted.icons.setItemAt(DEFAULT_PATH + dataConverted.icons.getItemAt(i), i);
							}
						}
					}
					icons = dataConverted.icons;
				}
			} 
			
			override protected function shouldDrawCircle():Boolean {
				var mindMapDiagramShell:MindMapDiagramShell = this.mindMapDiagramShell;
				if (mindMapDiagramShell != null && diagramShellContext != null) { 
					return dataConverted != null 
						&& dataConverted.hasChildren 
						&& Boolean(dataConverted.hasChildren).valueOf()
						&& !dataConverted.expanded;
				} else {
					return false;
				}
			}
		]]>
	</fx:Script>
	
</mindmap:AbstractMindMapNodeRenderer>
