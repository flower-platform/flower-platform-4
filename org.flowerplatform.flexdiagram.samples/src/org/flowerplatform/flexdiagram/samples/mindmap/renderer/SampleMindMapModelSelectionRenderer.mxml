<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico Software, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

license-end
-->
<!---
@author Cristina Constantinescu
-->
<selection:AbstractSelectionRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
									 xmlns:s="library://ns.adobe.com/flex/spark" 
									 xmlns:mx="library://ns.adobe.com/flex/mx" 
									 xmlns:selection="org.flowerplatform.flexdiagram.renderer.selection.*"
									 xmlns:ui="org.flowerplatform.flexdiagram.ui.*"
									 depth="{int.MAX_VALUE}">
	
	<fx:Script>
		<![CDATA[
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			
			import org.flowerplatform.flexdiagram.ControllerUtils;
			import org.flowerplatform.flexdiagram.DiagramShellContext;
			import org.flowerplatform.flexdiagram.controller.model_extra_info.DynamicModelExtraInfoController;
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexdiagram.samples.mindmap.model.SampleMindMapModel;
			
			import spark.primitives.Ellipse;
			
			[Bindable]
			public var circleRadius:int = 10;
			
			public var padding:int = 3;
			
			override public function activate(context:DiagramShellContext, model:Object):void {
				super.activate(context, model);			
				
				DisplayObject(target).addEventListener(ResizeEvent.RESIZE, handleTargetMoveResize);	
				DisplayObject(target).addEventListener(MoveEvent.MOVE, handleTargetMoveResize);			
				// update position
				handleTargetMoveResize(null);				
			}
			
			/**
			 * 
			 * Called when we don't need the anchors, 
			 * and also when we don't want the anchors shown.
			 * 
			 */
			override public function deactivate(context:DiagramShellContext, model:Object):void {
				try {
					context.diagramShell.diagramRenderer.removeElement(circle);
				} catch (e:ArgumentError) {					
				}				
				
				// remove resize listeners				
				DisplayObject(target).removeEventListener(ResizeEvent.RESIZE, handleTargetMoveResize);			
				DisplayObject(target).removeEventListener(MoveEvent.MOVE, handleTargetMoveResize);			
				super.deactivate(context, model);
			}
			
			protected function handleTargetMoveResize(event:Event):void {
				setLayoutBoundsPosition(target.x, target.y);
				setLayoutBoundsSize(target.width, target.height);
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {			
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				if (node.hasChildren && 
					ControllerUtils.getModelChildrenController(context, node).getParent(context, node) is SampleMindMapModel) {	
					vLine.visible = !node.expanded;
					context.diagramShell.diagramRenderer.addElement(circle);
				} else if (!node.hasChildren) {
					if (circle.parent != null) {
						context.diagramShell.diagramRenderer.removeElement(circle);
					}					
				}
				
				graphics.clear();
				graphics.lineStyle(2, 0x3C37FE);		
				graphics.drawRoundRect(-padding, - padding, target.width + padding * 2, target.height + padding * 2, 10, 10);			
				
				if (node.side == MindMapDiagramShell.POSITION_LEFT) {
					circle.x = getDynamicObject(node).x - circleRadius * 2;						
					circle.y = getDynamicObject(node).y + getDynamicObject(node).height / 2 - circleRadius;
				} else if (node.side == MindMapDiagramShell.POSITION_RIGHT) {
					circle.x = getDynamicObject(node).x + getDynamicObject(node).width;
					circle.y = getDynamicObject(node).y + getDynamicObject(node).height / 2 - circleRadius;							
				}
			}
			
			protected function circle_mouseClickHandler(event:MouseEvent):void {
				ControllerUtils.getMindMapModelController(context, node).setExpanded(context, node, !node.expanded);
				
				vLine.visible = !node.expanded;
				
				event.preventDefault();
				event.stopImmediatePropagation();
			}
			
			protected function circle_mouseDownUpHandler(event:MouseEvent):void {
				event.preventDefault();
				event.stopImmediatePropagation();
			}
			
			private function get node():SampleMindMapModel {
				return SampleMindMapModel(model);
			}
			
			private function getDynamicObject(model:Object):Object {
				return DynamicModelExtraInfoController(ControllerUtils.getModelExtraInfoController(context, model)).getDynamicObject(context, model);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Group id="circle" 
				 click="circle_mouseClickHandler(event)" 
				 mouseDown="circle_mouseDownUpHandler(event)" mouseUp="circle_mouseDownUpHandler(event)"
				 width="{circleRadius * 2}" height="{circleRadius * 2}" depth="{int.MAX_VALUE}" >		
			<s:layout>				
				<s:BasicLayout />
			</s:layout>				
			<s:Ellipse id="ellipse" width="100%" height="100%">				
				<s:stroke>
					<s:SolidColorStroke color="#808080" weight="1" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="white" />
				</s:fill>			
			</s:Ellipse>
			<s:Line id="hLine" yFrom="{circleRadius -1/2}"  xFrom="{circleRadius/2}" yTo="{circleRadius -1/2}" xTo="{circleRadius * 2 - circleRadius/2}">
				<s:stroke>
					<s:SolidColorStroke color="#808080" weight="1" />
				</s:stroke>
			</s:Line>
			<s:Line id="vLine" xFrom="{circleRadius - 1/2}"  yFrom="{circleRadius/2}" xTo="{circleRadius - 1/2}" yTo="{circleRadius * 2 - circleRadius/2}">
				<s:stroke>
					<s:SolidColorStroke color="#808080" weight="1" />
				</s:stroke>
			</s:Line>
		</s:Group>
		
	</fx:Declarations>
	
</selection:AbstractSelectionRenderer>